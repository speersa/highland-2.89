#! /bin/bash
#
# A script to configure and compile the ROOT package.  This is executed as 
# follows.
#   
#  - To compile the library:
#       compile_script compile package_root tag
#
#  - To clean up the library:
#       compile_script clean package_root tag

COMMAND=$1; shift
PACKAGE=$1; shift
TAG=$1; shift

# Set the version of ROOT to be compiled.
VERSION=v5.34.34
# VERSION=v6.10.02

# Set the location of the source tar file and any correction patchs.
TAR_FILE=${PACKAGE}/root_${VERSION}.source.tar.gz
PATCH_FILE=${PACKAGE}/root_${VERSION}.patch

# Set the install location.
BASE="${PACKAGE}/${TAG}"
INSTALL=${BASE}
SOURCE=${BASE}/root
if ! ( echo ${VERSION} | grep v5 ) then
   SOURCE=${SOURCE}-$(echo ${VERSION} | cut -c 2-)
fi
BUILD=${SOURCE}-build

# Set the install prefix - check to see whether VO_T2K_ORG_SW_DIR is
# defined in the environment. On a GRID CE this would point to
# /cvmfs/t2k.gridpp.ac.uk.  For the purpose of building a deployable
# binary, it should point to the local build area
# e.g. /scratch/${USER}/t2k
if [ -n "$VO_T2K_ORG_SW_DIR" ]; then
	echo "Location independent build"
	echo "\$VO_T2K_ORG_SW_DIR=$VO_T2K_ORG_SW_DIR"
	PREFIXARGS=""
else
	echo "ND280 default location specific build"
	PREFIXARGS="--prefix=${INSTALL} --etcdir=${INSTALL}"
fi

# Make sure the environment is properly configured.
source ../cmt/setup.sh

# Get the system identifier.
SYSTEM=`sh ${CMTROOT}/mgr/cmt_linux_version.sh`

# This is surely wrong on most peoples machines.  It needs to be
# probed for, but that is a battle for another day.
case $SYSTEM in 
*) ARCH= ;;
esac;

# Add linker options for Linux only
case `uname` in
    Linux)
	ldFLAGS=LDFLAGS="-Wl,--no-as-needed"
	;;
    *)
	ldFLAGS=
	;;
esac

# Make sure that there isn't a setup ROOT.
unset ROOTSYS

# Make doubly sure the ~/.rootrc file is not read.  This is also set
# in the requirements to make the build consistent, but it ABSOLUTELY
# cannot be set here, so be pedantic.
export ROOTENV_NO_HOME
ROOTENV_NO_HOME=1

case ${COMMAND} in 
    compile)
	#    set -x
	#    set -e 
	cd ${PACKAGE}/${TAG}
	if [ ! -d ${SOURCE} ]; then
    	    tar -xzf ${TAR_FILE} || exit 1
    	    if [ -f ${PATCH_FILE} ]; then
    		cd ${SOURCE}
    		patch -f -p1 < ${PATCH_FILE} || exit 1
    	    fi
	fi
	if (true && which cmake); then
	    # CMAKE BUILD.  This is the recommended way to build ROOT.
	    # This is only used if cmake is in the path, and can be
	    # disabled by changing "true" to "false".  The CMAKE build
	    # depends on the gsl-config, and mysql-config commands to
	    # find the library paths, so they don't need to be
	    # explicitly set.
	    mkdir -p ${BUILD}
	    cd ${BUILD}
	    cmake \
		  -DCMAKE_INSTALL_PREFIX=${INSTALL} \
		  -DCMAKE_BUILD_TYPE=Debug \
		  -Dgminimal=ON \
		  -Dasimage=ON \
		  -Dastiff=ON \
		  -Dcintex=OFF \
		  -Dcxx11=ON \
		  -Dgdml=ON \
		  -Dmathmore=ON \
		  -Dgsl_shared=ON \
		  -Dbuiltin_gsl=OFF \
		  -Dmysql=ON \
		  -Dminuit2=ON \
		  -Dopengl=ON \
		  -Dpython=ON \
		  -Dreflex=OFF \
		  -Droofit=ON \
		  -Drpath=OFF \
		  -Dshared=ON \
		  -Dsoversion=ON \
		  -Dsqlite=ON \
		  -Dtmva=ON \
		  -Dunuran=ON \
		  -Dx11=ON \
		  -Dxml=ON \
		  ${SOURCE}
	else
	    # Old build.  This is already deprecated for root 5.34,
	    # and is unsupported after that.
	    BUILD=${SOURCE}
	    cd ${BUILD}
	    sh configure ${ARCH} ${PREFIXARGS} \
	       --disable-afs                \
	       --disable-alien              \
	       --disable-builtin-afterimage \
	       --enable-builtin-ftgl        \
	       --enable-builtin-freetype    \
	       --enable-builtin-pcre        \
	       --enable-builtin-zlib        \
	       --disable-castor             \
	       --disable-chirp              \
	       --disable-cintex             \
	       --disable-explicitlink       \
	       --disable-fftw3              \
	       --enable-gdml                \
	       --disable-gfal               \
	       --disable-globus             \
	       --disable-krb5               \
	       --disable-ldap               \
	       --disable-monalisa           \
	       --with-mysql-incdir=${MYSQL_INCLUDE_DIR} \
	       --with-mysql-libdir=${MYSQL_LIB_DIR} \
	       --disable-odbc               \
	       --disable-oracle             \
	       --disable-pgsql              \
	       --disable-pythia6            \
	       --disable-qt                 \
	       --disable-qtgsi              \
	       --disable-reflex             \
	       --enable-roofit              \
	       --enable-minuit2             \
	       --disable-ruby               \
	       --disable-rfio               \
	       --disable-rpath              \
	       --disable-sapdb              \
	       --disable-shadowpw           \
	       --enable-soversion           \
	       --disable-srp                \
	       --disable-ssl                \
	       --disable-table              \
	       --enable-unuran              \
	       --disable-winrtdebug         \
	       --enable-gsl-shared          \
	       --with-gsl-incdir=${GSL_INCLUDE_DIR} \
	       --with-gsl-libdir=${GSL_LIB_DIR}
	fi
	
	MAKEFLAGS=${ldFLAGS}
	if [ -n "${ND280_NJOBS}" ]; then
    	    echo "Commencing make using N=${ND280_NJOBS} parallel jobs"
    	    export MAKEFLAGS+=" -j ${ND280_NJOBS}" 
	fi
	make 
	if [ -n "${INSTALL}" ]; then
    	    make install 
	else
    	    echo "Making links for location independence..."
    	    
    	    # create local links to bin, lib and include
    	    cd ${BASE}
    	    ln -s ${BUILD}/bin .
    	    ln -s ${BUILD}/lib .
    	    ln -s ${BUILD}/include .
    	    
    	    # add ROOT libs and bins to InstallArea
    	    echo "Adding links to ${CMTPATH}/InstallArea"
    	    for OBJ in bin lib; do
    		OBJDIR=${CMTPATH}/InstallArea/${CMTCONFIG}/${OBJ}
    		if [ ! -e $OBJDIR ]; then
    		    mkdir -p $OBJDIR
    		fi
    		cd ${CMTPATH}/InstallArea/${CMTCONFIG}/${OBJ}
    		for l in ${PACKAGE}/${TAG}/${OBJ}/*; do ln -fsv $l .; echo $l > $.cmtref; done
    	    done
    	    
    	    # point paths to the right place
    	    export LD_LIBRARY_PATH=$(pwd)/lib:$LD_LIBRARY_PATH
    	    export PATH=$(pwd)/bin:$PATH
    	    source bin/thisroot.sh
    	    echo "Location independent build"
    	    echo "PATH:$PATH" | grep ROOT
    	    echo "LD_LIBRARY_PATH:$LD_LIBRARY_PATH" | grep ROOT
    	    
	fi
	;;
    
    clean)
  	rm -rfv ${SOURCE}
  	;;
esac
