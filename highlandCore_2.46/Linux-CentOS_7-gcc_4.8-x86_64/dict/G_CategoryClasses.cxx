//
// File generated by /t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64//bin/rootcint at Thu Apr 20 02:11:36 2023

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIt2kdIaspeersdIHighland_InstallsdIHighLAND_2dO89dIhighlandCore_2dO46dILinuxmICentOS_7mIgcc_4dO8mIx86_64dIdictdIG_CategoryClasses
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G_CategoryClasses.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void TrackTypeDefinition_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackTypeDefinition(void *p = 0);
   static void *newArray_TrackTypeDefinition(Long_t size, void *p);
   static void delete_TrackTypeDefinition(void *p);
   static void deleteArray_TrackTypeDefinition(void *p);
   static void destruct_TrackTypeDefinition(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackTypeDefinition*)
   {
      ::TrackTypeDefinition *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackTypeDefinition >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackTypeDefinition", ::TrackTypeDefinition::Class_Version(), "/home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/inc/CategoryClasses.hxx", 16,
                  typeid(::TrackTypeDefinition), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TrackTypeDefinition::Dictionary, isa_proxy, 4,
                  sizeof(::TrackTypeDefinition) );
      instance.SetNew(&new_TrackTypeDefinition);
      instance.SetNewArray(&newArray_TrackTypeDefinition);
      instance.SetDelete(&delete_TrackTypeDefinition);
      instance.SetDeleteArray(&deleteArray_TrackTypeDefinition);
      instance.SetDestructor(&destruct_TrackTypeDefinition);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TrackTypeDefinition*)
   {
      return GenerateInitInstanceLocal((::TrackTypeDefinition*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackTypeDefinition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TrackCategoryDefinition_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackCategoryDefinition(void *p = 0);
   static void *newArray_TrackCategoryDefinition(Long_t size, void *p);
   static void delete_TrackCategoryDefinition(void *p);
   static void deleteArray_TrackCategoryDefinition(void *p);
   static void destruct_TrackCategoryDefinition(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackCategoryDefinition*)
   {
      ::TrackCategoryDefinition *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackCategoryDefinition >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackCategoryDefinition", ::TrackCategoryDefinition::Class_Version(), "/home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/inc/CategoryClasses.hxx", 51,
                  typeid(::TrackCategoryDefinition), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TrackCategoryDefinition::Dictionary, isa_proxy, 4,
                  sizeof(::TrackCategoryDefinition) );
      instance.SetNew(&new_TrackCategoryDefinition);
      instance.SetNewArray(&newArray_TrackCategoryDefinition);
      instance.SetDelete(&delete_TrackCategoryDefinition);
      instance.SetDeleteArray(&deleteArray_TrackCategoryDefinition);
      instance.SetDestructor(&destruct_TrackCategoryDefinition);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TrackCategoryDefinition*)
   {
      return GenerateInitInstanceLocal((::TrackCategoryDefinition*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackCategoryDefinition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TrackTypeDefinition::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackTypeDefinition::Class_Name()
{
   return "TrackTypeDefinition";
}

//______________________________________________________________________________
const char *TrackTypeDefinition::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackTypeDefinition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackTypeDefinition::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackTypeDefinition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackTypeDefinition::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackTypeDefinition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackTypeDefinition::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackTypeDefinition*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TrackCategoryDefinition::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCategoryDefinition::Class_Name()
{
   return "TrackCategoryDefinition";
}

//______________________________________________________________________________
const char *TrackCategoryDefinition::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackCategoryDefinition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCategoryDefinition::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackCategoryDefinition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCategoryDefinition::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackCategoryDefinition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCategoryDefinition::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackCategoryDefinition*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TrackCategoryDefinition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackCategoryDefinition.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackCategoryDefinition::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackCategoryDefinition::Class(),this);
   }
}

//______________________________________________________________________________
void TrackCategoryDefinition::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackCategoryDefinition.
      TClass *R__cl = ::TrackCategoryDefinition::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_typesOK", (void*)&_typesOK);
      R__insp.InspectMember("vector<bool>", (void*)&_typesOK, "_typesOK.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_code", &_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name", (void*)&_name);
      R__insp.InspectMember("string", (void*)&_name, "_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isMultiType", &_isMultiType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_types", (void*)&_types);
      R__insp.InspectMember("vector<TrackTypeDefinition>", (void*)&_types, "_types.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TrackCategoryDefinition(void *p) {
      return  p ? new(p) ::TrackCategoryDefinition : new ::TrackCategoryDefinition;
   }
   static void *newArray_TrackCategoryDefinition(Long_t nElements, void *p) {
      return p ? new(p) ::TrackCategoryDefinition[nElements] : new ::TrackCategoryDefinition[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackCategoryDefinition(void *p) {
      delete ((::TrackCategoryDefinition*)p);
   }
   static void deleteArray_TrackCategoryDefinition(void *p) {
      delete [] ((::TrackCategoryDefinition*)p);
   }
   static void destruct_TrackCategoryDefinition(void *p) {
      typedef ::TrackCategoryDefinition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TrackCategoryDefinition

//______________________________________________________________________________
void TrackTypeDefinition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackTypeDefinition.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackTypeDefinition::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackTypeDefinition::Class(),this);
   }
}

//______________________________________________________________________________
void TrackTypeDefinition::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackTypeDefinition.
      TClass *R__cl = ::TrackTypeDefinition::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name", (void*)&_name);
      R__insp.InspectMember("string", (void*)&_name, "_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_color", &_color);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_order", &_order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_code", &_code);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_enabled", &_enabled);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TrackTypeDefinition(void *p) {
      return  p ? new(p) ::TrackTypeDefinition : new ::TrackTypeDefinition;
   }
   static void *newArray_TrackTypeDefinition(Long_t nElements, void *p) {
      return p ? new(p) ::TrackTypeDefinition[nElements] : new ::TrackTypeDefinition[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackTypeDefinition(void *p) {
      delete ((::TrackTypeDefinition*)p);
   }
   static void deleteArray_TrackTypeDefinition(void *p) {
      delete [] ((::TrackTypeDefinition*)p);
   }
   static void destruct_TrackTypeDefinition(void *p) {
      typedef ::TrackTypeDefinition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TrackTypeDefinition

namespace ROOTDict {
   void vectorlETrackTypeDefinitiongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETrackTypeDefinitiongR_Dictionary();
   static void *new_vectorlETrackTypeDefinitiongR(void *p = 0);
   static void *newArray_vectorlETrackTypeDefinitiongR(Long_t size, void *p);
   static void delete_vectorlETrackTypeDefinitiongR(void *p);
   static void deleteArray_vectorlETrackTypeDefinitiongR(void *p);
   static void destruct_vectorlETrackTypeDefinitiongR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TrackTypeDefinition>*)
   {
      vector<TrackTypeDefinition> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TrackTypeDefinition>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TrackTypeDefinition>", -2, "/t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TrackTypeDefinition>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETrackTypeDefinitiongR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TrackTypeDefinition>) );
      instance.SetNew(&new_vectorlETrackTypeDefinitiongR);
      instance.SetNewArray(&newArray_vectorlETrackTypeDefinitiongR);
      instance.SetDelete(&delete_vectorlETrackTypeDefinitiongR);
      instance.SetDeleteArray(&deleteArray_vectorlETrackTypeDefinitiongR);
      instance.SetDestructor(&destruct_vectorlETrackTypeDefinitiongR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TrackTypeDefinition> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TrackTypeDefinition>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETrackTypeDefinitiongR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TrackTypeDefinition>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETrackTypeDefinitiongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TrackTypeDefinition> : new vector<TrackTypeDefinition>;
   }
   static void *newArray_vectorlETrackTypeDefinitiongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TrackTypeDefinition>[nElements] : new vector<TrackTypeDefinition>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETrackTypeDefinitiongR(void *p) {
      delete ((vector<TrackTypeDefinition>*)p);
   }
   static void deleteArray_vectorlETrackTypeDefinitiongR(void *p) {
      delete [] ((vector<TrackTypeDefinition>*)p);
   }
   static void destruct_vectorlETrackTypeDefinitiongR(void *p) {
      typedef vector<TrackTypeDefinition> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TrackTypeDefinition>

/********************************************************
* /home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/Linux-CentOS_7-gcc_4.8-x86_64/dict/G_CategoryClasses.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG_CategoryClasses();

extern "C" void G__set_cpp_environmentG_CategoryClasses() {
  G__cpp_reset_tagtableG_CategoryClasses();
}
#include <new>
extern "C" int G__cpp_dllrevG_CategoryClasses() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TrackTypeDefinition */
static int G__G_CategoryClasses_403_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackTypeDefinition* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackTypeDefinition[n];
     } else {
       p = new((void*) gvp) TrackTypeDefinition[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackTypeDefinition;
     } else {
       p = new((void*) gvp) TrackTypeDefinition;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackTypeDefinition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackTypeDefinition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackTypeDefinition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackTypeDefinition::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackTypeDefinition*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackTypeDefinition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackTypeDefinition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackTypeDefinition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_403_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackTypeDefinition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G_CategoryClasses_403_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackTypeDefinition* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackTypeDefinition(*(TrackTypeDefinition*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackTypeDefinition G__TTrackTypeDefinition;
static int G__G_CategoryClasses_403_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackTypeDefinition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackTypeDefinition*) (soff+(sizeof(TrackTypeDefinition)*i)))->~G__TTrackTypeDefinition();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackTypeDefinition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackTypeDefinition*) (soff))->~G__TTrackTypeDefinition();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G_CategoryClasses_403_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackTypeDefinition* dest = (TrackTypeDefinition*) G__getstructoffset();
   *dest = *(TrackTypeDefinition*) libp->para[0].ref;
   const TrackTypeDefinition& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackCategoryDefinition */
static int G__G_CategoryClasses_404_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCategoryDefinition* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCategoryDefinition((bool) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TrackCategoryDefinition((bool) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TrackCategoryDefinition[n];
       } else {
         p = new((void*) gvp) TrackCategoryDefinition[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TrackCategoryDefinition;
       } else {
         p = new((void*) gvp) TrackCategoryDefinition;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TrackCategoryDefinition*) G__getstructoffset())->GetNTypes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TrackTypeDefinition>& obj = ((TrackCategoryDefinition*) G__getstructoffset())->GetCategoryTypes();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCategoryDefinition*) G__getstructoffset())->AddType(*(TrackTypeDefinition*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TrackCategoryDefinition*) G__getstructoffset())->IsMultiType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCategoryDefinition*) G__getstructoffset())->GetCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TrackCategoryDefinition*) G__getstructoffset())->CheckCategoryType((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TrackCategoryDefinition*) G__getstructoffset())->SetCode((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TrackCategoryDefinition*) G__getstructoffset())->SetCode((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCategoryDefinition*) G__getstructoffset())->SetCategoryType((int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCategoryDefinition*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TrackCategoryDefinition*) G__getstructoffset())->GetNames((string*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((TrackCategoryDefinition*) G__getstructoffset())->GetColors((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((TrackCategoryDefinition*) G__getstructoffset())->GetCodes((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackCategoryDefinition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCategoryDefinition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackCategoryDefinition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackCategoryDefinition::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCategoryDefinition*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCategoryDefinition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCategoryDefinition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCategoryDefinition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_CategoryClasses_404_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCategoryDefinition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G_CategoryClasses_404_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackCategoryDefinition* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackCategoryDefinition(*(TrackCategoryDefinition*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackCategoryDefinition G__TTrackCategoryDefinition;
static int G__G_CategoryClasses_404_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackCategoryDefinition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackCategoryDefinition*) (soff+(sizeof(TrackCategoryDefinition)*i)))->~G__TTrackCategoryDefinition();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackCategoryDefinition*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackCategoryDefinition*) (soff))->~G__TTrackCategoryDefinition();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G_CategoryClasses_404_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCategoryDefinition* dest = (TrackCategoryDefinition*) G__getstructoffset();
   *dest = *(TrackCategoryDefinition*) libp->para[0].ref;
   const TrackCategoryDefinition& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TrackTypeDefinition */

/* TrackCategoryDefinition */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG_CategoryClasses {
 public:
  G__Sizep2memfuncG_CategoryClasses(): p(&G__Sizep2memfuncG_CategoryClasses::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG_CategoryClasses::*p)();
};

size_t G__get_sizep2memfuncG_CategoryClasses()
{
  G__Sizep2memfuncG_CategoryClasses a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG_CategoryClasses() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition))) {
     TrackTypeDefinition *G__Lderived;
     G__Lderived=(TrackTypeDefinition*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition),G__get_linked_tagnum(&G__G_CategoryClassesLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition))) {
     TrackCategoryDefinition *G__Lderived;
     G__Lderived=(TrackCategoryDefinition*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition),G__get_linked_tagnum(&G__G_CategoryClassesLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG_CategoryClasses() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackTypeDefinition>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TrackTypeDefinition */
static void G__setup_memvarTrackTypeDefinition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition));
   { TrackTypeDefinition *p; p=(TrackTypeDefinition*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_string),-1,-1,1,"_name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_color)-(long)(p)),105,0,0,-1,-1,-1,1,"_color=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_order)-(long)(p)),105,0,0,-1,-1,-1,1,"_order=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_code)-(long)(p)),105,0,0,-1,-1,-1,1,"_code=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_enabled)-(long)(p)),103,0,0,-1,-1,-1,1,"_enabled=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackCategoryDefinition */
static void G__setup_memvarTrackCategoryDefinition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition));
   { TrackCategoryDefinition *p; p=(TrackCategoryDefinition*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,2,"_typesOK=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_code=",0,"!");
   G__memvar_setup((void*)((long)(&p->_name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_string),-1,-1,1,"_name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isMultiType)-(long)(p)),103,0,0,-1,-1,-1,1,"_isMultiType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_types)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR),G__defined_typename("vector<TrackTypeDefinition>"),-1,1,"_types=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG_CategoryClasses() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTrackTypeDefinition(void) {
   /* TrackTypeDefinition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition));
   G__memfunc_setup("TrackTypeDefinition",1952,G__G_CategoryClasses_403_0_1, 105, G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G_CategoryClasses_403_0_2, 85, G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackTypeDefinition::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G_CategoryClasses_403_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackTypeDefinition::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G_CategoryClasses_403_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackTypeDefinition::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G_CategoryClasses_403_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackTypeDefinition::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G_CategoryClasses_403_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G_CategoryClasses_403_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackTypeDefinition::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G_CategoryClasses_403_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackTypeDefinition::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G_CategoryClasses_403_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackTypeDefinition::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G_CategoryClasses_403_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackTypeDefinition::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackTypeDefinition", 1952, G__G_CategoryClasses_403_0_14, (int) ('i'), G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition), -1, 0, 1, 1, 1, 0, "u 'TrackTypeDefinition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackTypeDefinition", 2078, G__G_CategoryClasses_403_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G_CategoryClasses_403_0_16, (int) ('u'), G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackTypeDefinition), -1, 1, 1, 1, 1, 0, "u 'TrackTypeDefinition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackCategoryDefinition(void) {
   /* TrackCategoryDefinition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition));
   G__memfunc_setup("TrackCategoryDefinition",2364,G__G_CategoryClasses_404_0_1, 105, G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition), -1, 0, 1, 1, 1, 0, "g - - 0 'false' multi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTypes",899,G__G_CategoryClasses_404_0_2, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCategoryTypes",1651,G__G_CategoryClasses_404_0_3, 117, G__get_linked_tagnum(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR), G__defined_typename("vector<TrackTypeDefinition>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddType",683,G__G_CategoryClasses_404_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TrackTypeDefinition' - 1 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMultiType",1129,G__G_CategoryClasses_404_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCode",667,G__G_CategoryClasses_404_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckCategoryType",1726,G__G_CategoryClasses_404_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCode",679,G__G_CategoryClasses_404_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - code i - - 0 '-999' defaultcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCategoryType",1548,G__G_CategoryClasses_404_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G_CategoryClasses_404_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNames",788,G__G_CategoryClasses_404_0_11, 85, G__get_linked_tagnum(&G__G_CategoryClassesLN_string), -1, 0, 1, 1, 1, 0, "U 'string' - 0 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColors",914,G__G_CategoryClasses_404_0_12, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 0 - colors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCodes",782,G__G_CategoryClasses_404_0_13, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 0 - codes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G_CategoryClasses_404_0_14, 85, G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackCategoryDefinition::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G_CategoryClasses_404_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCategoryDefinition::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G_CategoryClasses_404_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackCategoryDefinition::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G_CategoryClasses_404_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackCategoryDefinition::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G_CategoryClassesLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G_CategoryClasses_404_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G_CategoryClasses_404_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCategoryDefinition::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G_CategoryClasses_404_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCategoryDefinition::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G_CategoryClasses_404_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCategoryDefinition::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G_CategoryClasses_404_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCategoryDefinition::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCategoryDefinition", 2364, G__G_CategoryClasses_404_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition), -1, 0, 1, 1, 1, 0, "u 'TrackCategoryDefinition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCategoryDefinition", 2490, G__G_CategoryClasses_404_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G_CategoryClasses_404_0_28, (int) ('u'), G__get_linked_tagnum(&G__G_CategoryClassesLN_TrackCategoryDefinition), -1, 1, 1, 1, 1, 0, "u 'TrackCategoryDefinition' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG_CategoryClasses() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG_CategoryClasses() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG_CategoryClasses() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G_CategoryClassesLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_TrackTypeDefinition = { "TrackTypeDefinition" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_TrackCategoryDefinition = { "TrackCategoryDefinition" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR = { "vector<TrackTypeDefinition,allocator<TrackTypeDefinition> >" , 99 , -1 };
G__linked_taginfo G__G_CategoryClassesLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TrackTypeDefinition,allocator<TrackTypeDefinition> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG_CategoryClasses() {
  G__G_CategoryClassesLN_TClass.tagnum = -1 ;
  G__G_CategoryClassesLN_TBuffer.tagnum = -1 ;
  G__G_CategoryClassesLN_TMemberInspector.tagnum = -1 ;
  G__G_CategoryClassesLN_TObject.tagnum = -1 ;
  G__G_CategoryClassesLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__G_CategoryClassesLN_string.tagnum = -1 ;
  G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G_CategoryClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G_CategoryClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_CategoryClassesLN_TrackTypeDefinition.tagnum = -1 ;
  G__G_CategoryClassesLN_TrackCategoryDefinition.tagnum = -1 ;
  G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR.tagnum = -1 ;
  G__G_CategoryClassesLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG_CategoryClasses() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TClass);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TObject);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_string);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TrackTypeDefinition),sizeof(TrackTypeDefinition),-1,292096,(char*)NULL,G__setup_memvarTrackTypeDefinition,G__setup_memfuncTrackTypeDefinition);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_TrackCategoryDefinition),sizeof(TrackCategoryDefinition),-1,292096,(char*)NULL,G__setup_memvarTrackCategoryDefinition,G__setup_memfuncTrackCategoryDefinition);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR);
   G__get_linked_tagnum_fwd(&G__G_CategoryClassesLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupG_CategoryClasses(void) {
  G__check_setup_version(30051515,"G__cpp_setupG_CategoryClasses()");
  G__set_cpp_environmentG_CategoryClasses();
  G__cpp_setup_tagtableG_CategoryClasses();

  G__cpp_setup_inheritanceG_CategoryClasses();

  G__cpp_setup_typetableG_CategoryClasses();

  G__cpp_setup_memvarG_CategoryClasses();

  G__cpp_setup_memfuncG_CategoryClasses();
  G__cpp_setup_globalG_CategoryClasses();
  G__cpp_setup_funcG_CategoryClasses();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG_CategoryClasses();
  return;
}
class G__cpp_setup_initG_CategoryClasses {
  public:
    G__cpp_setup_initG_CategoryClasses() { G__add_setup_func("G_CategoryClasses",(G__incsetup)(&G__cpp_setupG_CategoryClasses)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG_CategoryClasses() { G__remove_setup_func("G_CategoryClasses"); }
};
G__cpp_setup_initG_CategoryClasses G__cpp_setup_initializerG_CategoryClasses;

