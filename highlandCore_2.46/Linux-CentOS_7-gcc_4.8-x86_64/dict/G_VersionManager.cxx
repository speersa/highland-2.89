//
// File generated by /t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64//bin/rootcint at Thu Apr 20 02:11:36 2023

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIt2kdIaspeersdIHighland_InstallsdIHighLAND_2dO89dIhighlandCore_2dO46dILinuxmICentOS_7mIgcc_4dO8mIx86_64dIdictdIG_VersionManager
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G_VersionManager.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Versioning Versioning;
      #else
      class Versioning  :  public ::HLClonesArray {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Versioning() throw() {};
         vector< ::string > _prodnd280Version; //
         vector< ::string > _prodoaAnalysisVersion; //
         vector< ProdId_h > _prodId; //
         vector< ::string > _prodName; //
         vector< ::PackageVersion* > _packages; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void PackageVersion_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PackageVersion(void *p = 0);
   static void *newArray_PackageVersion(Long_t size, void *p);
   static void delete_PackageVersion(void *p);
   static void deleteArray_PackageVersion(void *p);
   static void destruct_PackageVersion(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::PackageVersion*)
   {
      ::PackageVersion *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PackageVersion >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PackageVersion", ::PackageVersion::Class_Version(), "/home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/inc/VersionManager.hxx", 16,
                  typeid(::PackageVersion), ::ROOT::DefineBehavior(ptr, ptr),
                  &::PackageVersion::Dictionary, isa_proxy, 4,
                  sizeof(::PackageVersion) );
      instance.SetNew(&new_PackageVersion);
      instance.SetNewArray(&newArray_PackageVersion);
      instance.SetDelete(&delete_PackageVersion);
      instance.SetDeleteArray(&deleteArray_PackageVersion);
      instance.SetDestructor(&destruct_PackageVersion);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::PackageVersion*)
   {
      return GenerateInitInstanceLocal((::PackageVersion*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PackageVersion*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Versioning_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Versioning_Dictionary();
   static void delete_Versioning(void *p);
   static void deleteArray_Versioning(void *p);
   static void destruct_Versioning(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Versioning*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Versioning) == sizeof( ::ROOTShadow::Shadow::Versioning));
      ::Versioning *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Versioning),0);
      static ::ROOT::TGenericClassInfo 
         instance("Versioning", "/home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/inc/VersionManager.hxx", 54,
                  typeid(::Versioning), ::ROOT::DefineBehavior(ptr, ptr),
                  &Versioning_ShowMembers, &Versioning_Dictionary, isa_proxy, 4,
                  sizeof(::Versioning) );
      instance.SetDelete(&delete_Versioning);
      instance.SetDeleteArray(&deleteArray_Versioning);
      instance.SetDestructor(&destruct_Versioning);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Versioning*)
   {
      return GenerateInitInstanceLocal((::Versioning*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Versioning*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Versioning_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::Versioning*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr PackageVersion::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *PackageVersion::Class_Name()
{
   return "PackageVersion";
}

//______________________________________________________________________________
const char *PackageVersion::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PackageVersion*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PackageVersion::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PackageVersion*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PackageVersion::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PackageVersion*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PackageVersion::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PackageVersion*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void PackageVersion::Streamer(TBuffer &R__b)
{
   // Stream an object of class PackageVersion.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PackageVersion::Class(),this);
   } else {
      R__b.WriteClassBuffer(PackageVersion::Class(),this);
   }
}

//______________________________________________________________________________
void PackageVersion::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PackageVersion.
      TClass *R__cl = ::PackageVersion::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name", (void*)&_name);
      R__insp.InspectMember("string", (void*)&_name, "_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_version", (void*)&_version);
      R__insp.InspectMember("string", (void*)&_version, "_version.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_PackageVersion(void *p) {
      return  p ? new(p) ::PackageVersion : new ::PackageVersion;
   }
   static void *newArray_PackageVersion(Long_t nElements, void *p) {
      return p ? new(p) ::PackageVersion[nElements] : new ::PackageVersion[nElements];
   }
   // Wrapper around operator delete
   static void delete_PackageVersion(void *p) {
      delete ((::PackageVersion*)p);
   }
   static void deleteArray_PackageVersion(void *p) {
      delete [] ((::PackageVersion*)p);
   }
   static void destruct_PackageVersion(void *p) {
      typedef ::PackageVersion current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::PackageVersion

//______________________________________________________________________________
namespace ROOTDict {
   void Versioning_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Versioning.
      typedef ::ROOTShadow::Shadow::Versioning ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::Versioning*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_prodnd280Version", (void*)&sobj->_prodnd280Version);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_prodnd280Version, "_prodnd280Version.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_prodoaAnalysisVersion", (void*)&sobj->_prodoaAnalysisVersion);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_prodoaAnalysisVersion, "_prodoaAnalysisVersion.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_prodId", (void*)&sobj->_prodId);
      R__insp.InspectMember("vector<ProdId_h>", (void*)&sobj->_prodId, "_prodId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_prodName", (void*)&sobj->_prodName);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_prodName, "_prodName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_packages", (void*)&sobj->_packages);
      R__insp.InspectMember("vector<PackageVersion*>", (void*)&sobj->_packages, "_packages.", false);
      R__insp.GenericShowMembers("HLClonesArray", ( ::HLClonesArray * )( (::Versioning*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_Versioning(void *p) {
      delete ((::Versioning*)p);
   }
   static void deleteArray_Versioning(void *p) {
      delete [] ((::Versioning*)p);
   }
   static void destruct_Versioning(void *p) {
      typedef ::Versioning current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Versioning

namespace ROOTDict {
   void vectorlEPackageVersionmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEPackageVersionmUgR_Dictionary();
   static void *new_vectorlEPackageVersionmUgR(void *p = 0);
   static void *newArray_vectorlEPackageVersionmUgR(Long_t size, void *p);
   static void delete_vectorlEPackageVersionmUgR(void *p);
   static void deleteArray_vectorlEPackageVersionmUgR(void *p);
   static void destruct_vectorlEPackageVersionmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<PackageVersion*>*)
   {
      vector<PackageVersion*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<PackageVersion*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<PackageVersion*>", -2, "/t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<PackageVersion*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEPackageVersionmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<PackageVersion*>) );
      instance.SetNew(&new_vectorlEPackageVersionmUgR);
      instance.SetNewArray(&newArray_vectorlEPackageVersionmUgR);
      instance.SetDelete(&delete_vectorlEPackageVersionmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEPackageVersionmUgR);
      instance.SetDestructor(&destruct_vectorlEPackageVersionmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<PackageVersion*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<PackageVersion*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEPackageVersionmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<PackageVersion*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEPackageVersionmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PackageVersion*> : new vector<PackageVersion*>;
   }
   static void *newArray_vectorlEPackageVersionmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PackageVersion*>[nElements] : new vector<PackageVersion*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEPackageVersionmUgR(void *p) {
      delete ((vector<PackageVersion*>*)p);
   }
   static void deleteArray_vectorlEPackageVersionmUgR(void *p) {
      delete [] ((vector<PackageVersion*>*)p);
   }
   static void destruct_vectorlEPackageVersionmUgR(void *p) {
      typedef vector<PackageVersion*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<PackageVersion*>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/t2k/Software/v12r25/ROOT/v5r34p34n00/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<string>

/********************************************************
* /home/t2k/aspeers/Highland_Installs/HighLAND_2.89/highlandCore_2.46/Linux-CentOS_7-gcc_4.8-x86_64/dict/G_VersionManager.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG_VersionManager();

extern "C" void G__set_cpp_environmentG_VersionManager() {
  G__cpp_reset_tagtableG_VersionManager();
}
#include <new>
extern "C" int G__cpp_dllrevG_VersionManager() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PackageVersion */
static int G__G_VersionManager_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PackageVersion* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PackageVersion[n];
     } else {
       p = new((void*) gvp) PackageVersion[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PackageVersion;
     } else {
       p = new((void*) gvp) PackageVersion;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PackageVersion* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new PackageVersion(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) PackageVersion(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const PackageVersion*) G__getstructoffset())->Name();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PackageVersion*) G__getstructoffset())->SetName(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const PackageVersion*) G__getstructoffset())->Version();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PackageVersion*) G__getstructoffset())->SetVersion(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PackageVersion::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PackageVersion::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PackageVersion::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PackageVersion::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PackageVersion*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PackageVersion::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PackageVersion::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PackageVersion::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PackageVersion::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G_VersionManager_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PackageVersion* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PackageVersion(*(PackageVersion*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PackageVersion G__TPackageVersion;
static int G__G_VersionManager_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PackageVersion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PackageVersion*) (soff+(sizeof(PackageVersion)*i)))->~G__TPackageVersion();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PackageVersion*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PackageVersion*) (soff))->~G__TPackageVersion();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G_VersionManager_502_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PackageVersion* dest = (PackageVersion*) G__getstructoffset();
   *dest = *(PackageVersion*) libp->para[0].ref;
   const PackageVersion& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Versioning */
static int G__G_VersionManager_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Versioning& obj = Versioning::Get();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Versioning*) G__getstructoffset())->CheckVersionCompatibility((ProdId_h) G__int(libp->para[0]), (ProdId_h) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Versioning*) G__getstructoffset())->AddProduction((ProdId_h) G__int(libp->para[0]), *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, *(string*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Versioning*) G__getstructoffset())->GetProduction(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Versioning*) G__getstructoffset())->GetProductionName(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Versioning*) G__getstructoffset())->AddPackage(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Versioning*) G__getstructoffset())->GetPackageVersion(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Versioning*) G__getstructoffset())->ReadVersions(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G_VersionManager_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Versioning*) G__getstructoffset())->DumpVersions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Versioning G__TVersioning;
static int G__G_VersionManager_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Versioning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Versioning*) (soff+(sizeof(Versioning)*i)))->~G__TVersioning();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Versioning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Versioning*) (soff))->~G__TVersioning();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PackageVersion */

/* Versioning */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG_VersionManager {
 public:
  G__Sizep2memfuncG_VersionManager(): p(&G__Sizep2memfuncG_VersionManager::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG_VersionManager::*p)();
};

size_t G__get_sizep2memfuncG_VersionManager()
{
  G__Sizep2memfuncG_VersionManager a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG_VersionManager() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion))) {
     PackageVersion *G__Lderived;
     G__Lderived=(PackageVersion*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion),G__get_linked_tagnum(&G__G_VersionManagerLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning))) {
     Versioning *G__Lderived;
     G__Lderived=(Versioning*)0x1000;
     {
       HLClonesArray *G__Lpbase=(HLClonesArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning),G__get_linked_tagnum(&G__G_VersionManagerLN_HLClonesArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG_VersionManager() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProdId_h",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ProdId_h>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PackageVersion*>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PackageVersion */
static void G__setup_memvarPackageVersion(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion));
   { PackageVersion *p; p=(PackageVersion*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_string),-1,-1,2,"_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_string),-1,-1,2,"_version=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Versioning */
static void G__setup_memvarVersioning(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning));
   { Versioning *p; p=(Versioning*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning),-1,-2,4,"_versioning=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"_prodnd280Version=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"_prodoaAnalysisVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<ProdId_h>"),-1,4,"_prodId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"_prodName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR),G__defined_typename("vector<PackageVersion*>"),-1,4,"_packages=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG_VersionManager() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPackageVersion(void) {
   /* PackageVersion */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion));
   G__memfunc_setup("PackageVersion",1426,G__G_VersionManager_502_0_1, 105, G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PackageVersion",1426,G__G_VersionManager_502_0_2, 105, G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Name",385,G__G_VersionManager_502_0_4, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G__G_VersionManager_502_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Version",742,G__G_VersionManager_502_0_6, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__G_VersionManager_502_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G_VersionManager_502_0_8, 85, G__get_linked_tagnum(&G__G_VersionManagerLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PackageVersion::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G_VersionManager_502_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PackageVersion::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G_VersionManager_502_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PackageVersion::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G_VersionManager_502_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PackageVersion::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G_VersionManagerLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G_VersionManager_502_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G_VersionManager_502_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PackageVersion::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G_VersionManager_502_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PackageVersion::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G_VersionManager_502_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PackageVersion::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G_VersionManager_502_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PackageVersion::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PackageVersion", 1426, G__G_VersionManager_502_0_20, (int) ('i'), G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion), -1, 0, 1, 1, 1, 0, "u 'PackageVersion' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PackageVersion", 1552, G__G_VersionManager_502_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G_VersionManager_502_0_22, (int) ('u'), G__get_linked_tagnum(&G__G_VersionManagerLN_PackageVersion), -1, 1, 1, 1, 1, 0, "u 'PackageVersion' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVersioning(void) {
   /* Versioning */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning));
   G__memfunc_setup("Get",288,G__G_VersionManager_503_0_1, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Versioning& (*)())(&Versioning::Get) ), 0);
   G__memfunc_setup("CheckVersionCompatibility",2590,G__G_VersionManager_503_0_2, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - 'ProdId_h' 0 - prodInput i - 'ProdId_h' 0 - prodReader", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddProduction",1328,G__G_VersionManager_503_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'ProdId_h' 0 - prodId u 'string' - 11 - prodName "
"u 'string' - 11 - nd280Version u 'string' - 11 - oaAnalysisVersion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProduction",1351,G__G_VersionManager_503_0_4, 105, -1, G__defined_typename("ProdId_h"), 0, 1, 1, 1, 0, "u 'string' - 11 - softVersion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProductionName",1736,G__G_VersionManager_503_0_5, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - softVersion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPackage",949,G__G_VersionManager_503_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPackageVersion",1714,G__G_VersionManager_503_0_7, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadVersions",1237,G__G_VersionManager_503_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpVersions",1263,G__G_VersionManager_503_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Versioning",1060,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Versioning",1060,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G_VersionManagerLN_Versioning), -1, 0, 1, 1, 4, 0, "u 'Versioning' - 41 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'Versioning' - 41 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSoftwareVersionsForProduction",3346,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 3, 1, 4, 0, 
"i - 'ProdId_h' 0 - prodId u 'string' - 1 - nd280Version "
"u 'string' - 1 - oaAnalysisVersion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertProduction",1800,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G_VersionManagerLN_string), -1, 0, 1, 1, 4, 0, "i - 'ProdId_h' 0 - prod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBeforeVersion",1815,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 4, 0, 
"u 'string' - 11 - version u 'string' - 11 - version0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseSoftwareVersion",2092,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'string' - 11 - version i - - 1 - v "
"i - - 1 - r i - - 1 - p", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Versioning", 1186, G__G_VersionManager_503_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG_VersionManager() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG_VersionManager() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG_VersionManager() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G_VersionManagerLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_HLClonesArray = { "HLClonesArray" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_PackageVersion = { "PackageVersion" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_Versioning = { "Versioning" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR = { "vector<PackageVersion*,allocator<PackageVersion*> >" , 99 , -1 };
G__linked_taginfo G__G_VersionManagerLN_reverse_iteratorlEvectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<PackageVersion*,allocator<PackageVersion*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG_VersionManager() {
  G__G_VersionManagerLN_TClass.tagnum = -1 ;
  G__G_VersionManagerLN_TBuffer.tagnum = -1 ;
  G__G_VersionManagerLN_TMemberInspector.tagnum = -1 ;
  G__G_VersionManagerLN_TObject.tagnum = -1 ;
  G__G_VersionManagerLN_string.tagnum = -1 ;
  G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_HLClonesArray.tagnum = -1 ;
  G__G_VersionManagerLN_PackageVersion.tagnum = -1 ;
  G__G_VersionManagerLN_Versioning.tagnum = -1 ;
  G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR.tagnum = -1 ;
  G__G_VersionManagerLN_reverse_iteratorlEvectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG_VersionManager() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_TClass);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_TObject);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_string);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_HLClonesArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_PackageVersion),sizeof(PackageVersion),-1,324864,(char*)NULL,G__setup_memvarPackageVersion,G__setup_memfuncPackageVersion);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_Versioning),sizeof(Versioning),-1,298752,(char*)NULL,G__setup_memvarVersioning,G__setup_memfuncVersioning);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_vectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G_VersionManagerLN_reverse_iteratorlEvectorlEPackageVersionmUcOallocatorlEPackageVersionmUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupG_VersionManager(void) {
  G__check_setup_version(30051515,"G__cpp_setupG_VersionManager()");
  G__set_cpp_environmentG_VersionManager();
  G__cpp_setup_tagtableG_VersionManager();

  G__cpp_setup_inheritanceG_VersionManager();

  G__cpp_setup_typetableG_VersionManager();

  G__cpp_setup_memvarG_VersionManager();

  G__cpp_setup_memfuncG_VersionManager();
  G__cpp_setup_globalG_VersionManager();
  G__cpp_setup_funcG_VersionManager();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG_VersionManager();
  return;
}
class G__cpp_setup_initG_VersionManager {
  public:
    G__cpp_setup_initG_VersionManager() { G__add_setup_func("G_VersionManager",(G__incsetup)(&G__cpp_setupG_VersionManager)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG_VersionManager() { G__remove_setup_func("G_VersionManager"); }
};
G__cpp_setup_initG_VersionManager G__cpp_setup_initializerG_VersionManager;

