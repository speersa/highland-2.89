#! /usr/bin/env python
#
# clone the meta package of a specified subdirectory in the git repository. Then 
# build the dependencies of the meta package

import os
import sys
import getopt
import tempfile
import shutil
import re

from nd280 import shell

def usage():
  print("""

nd280-meta-dependencies [options] subGroup metaVersion

This clones the meta package of the specified subgroup on Git then clones and 
builds the meta package's dependencies. The version of the meta package is
specified on the command line.

The possible subgroups are: analysis, base, calib, externals, recon, sim, tools

Options:
  -h, --help : Print this message.
  -c, --clone : Only clone packages. Do not build.
  -p [packageName], --package [packageName] : Only clone and install the packages needed for a specific package, including the package itself. The specified package must belong in the specified subgroup. Only the dependencies from the subGroup will be cloned, so for some packages the subsequent build will fail.
  -j, --jobs : Max number of jobs to run

Examples:
  Clone version 1.79 of the meta package for the externals subgroup and install all packages from the externals subgroup with a maximum of 4 parallel jobs:
    nd280-meta-dependencies -j4 externals 1.79
  Clone version 1.79 of the meta package for the externals subgroup but only install ROOT and its dependencies. The versions of ROOT and the dependencies are dictated by the meta package.
    nd280-meta-dependencies -p ROOT externals 1.79
""")

makeJobs = "1"
package = "None"
clone = False

try:
  options, args = getopt.gnu_getopt(sys.argv[1:], "chj:p:", ["clone","help","jobs=","package="])
except:
  usage()
  print("ERROR: Invalid option.")
  sys.exit(1)

for option, value in options:
  if option == "-h" or option == "--help":
    usage()
    sys.exit(0)
  elif option == "-j" or option == "--jobs":
    makeJobs = value
    os.environ['ND280_NJOBS'] = value
  elif option == "-p" or option == "--package":
    package = value
  elif option == "-c":
    clone = True
  else:
    usage()
    sys.exit(1)

# check that we have the right number of arguments.      
if len(args) != 2:
  usage()
  print("ERROR: Wrong number of arguments.")
  sys.exit(1)

# get the different arguments
subGroup = args[0]
version = args[1]
print("nd280-meta-dependencies "+subGroup+" "+version)
# if subGroup != "externals":
  # clone = True
  # print("\nWARNING: packages outside of the 'external' subgroup cannot be installed automatically and will instead just be cloned.\n Please checkout the required version of nd280SoftwarePolicy and then follow the steps to install your package and its dependencies.\n")

if package == "ROOT":
  print("\nWARNING: ROOT and it's dependencies cannot be built with this script except for ROOT versions equal or greater than 6.20.04.03.\n Please run 'nd280-meta-dependencies externals [version]' for earlier versions.\n")


meta = subGroup+"Master"

# define subdirectory on git to search for dependencies for the analysis 
# subgroup
if subGroup == "analysis":
  subGroup = "anal"

shell.Shell("nd280-fetch-package master-packages "+meta+" "+meta+" "+version)

shell.Shell("nd280-find-dependencies -b "+subGroup+" "+meta+" "+version)

if package == "None":
  shell.Shell("(cd ${ND280_ROOT};"
            +"set -e;"
            +"for f in GetGit*.sh; do"
            +"  [ -e \"$f\" ] && (ls GetGit*.sh | xargs -P "+makeJobs
              +" -I NAME /bin/bash NAME;"
            +"  rm GetGit*.sh);"
            +"  break;"
            +"done)")
  if not clone:  
    shell.Shell("(cd ${ND280_ROOT};"
              +"set -e;"
              +"mkdir "+meta+"_"+version+"/`nd280-system`;"
              +"cd "+meta+"_"+version+"/`nd280-system`;"
              +"cmake ../cmake;"
              +"../bin/makeAll.sh)")

else:              
  shell.Shell("(cd ${ND280_ROOT};"
            +"set -e;"
            +"if [ ! -f GetGit"+package+".sh ]; then"
            +"  echo '\nERROR: GetGit"+package+".sh not found!\n Check you have given the correct subgroup.';"
            +"  exit;"
            +"fi;"
            +"chmod +x GetGit"+package+".sh;"
            +"./GetGit"+package+".sh;"
            +"nd280-find-dependencies -u "+subGroup+" "+package+" \*;"
            +"rm GetGit*.sh)")
  if not clone:  
    shell.Shell("(cd ${ND280_ROOT};"
              +"set -e;"
              +"if ! ls GetGitnd280SoftwarePolicy.sh 1> /dev/null 2>&1; then"
              +"  nd280-build-fetch-package framework nd280SoftwarePolicy nd280SoftwarePolicy master;"
              +"fi;"
              +"cd "+package+"_*;"
              +"mkdir `nd280-system`;"
              +"cd `nd280-system`;"
              +"cmake ../cmake;"
              +"../bin/makeAll.sh || echo 'Package build failed. Some dependencies may be outside the "+subGroup+" group. Clone the dependencies and rerun ../bin/makeAll.sh from the system folder of the package to be built.')")

sys.exit(0)

