#!/bin/bash
#################################################################

# create a new nd280 software package with the required folders and cmake files.

usage () {
  echo
  echo "Usage: nd280-new-package 'package' 'version'"
  echo "  Create a new nd280 software package called 'package'_'version'."
  echo
  echo "  Standard folders will be made within the package and templates for "
  echo "  the required cmake files will also be made with the cmake folder."
  echo
  echo "  The only files you will need to edit by hand are "
  echo "  cmake/<package>ND280_USE.cmake (to put in the package dependencies)"
  echo "  and cmake/CMakeLists.cmake (to add executables and non-standard "
  echo "  libraries)."
  echo
  echo "Options:"
  echo "  -h : Print this message."
  echo
  if [ ${#*} != 0 ]; then
    printf "ERROR: ${*}\n" | fold -s
    echo
    exit 1
  else
    exit 0
  fi
}

# read the options and arguments                                                
while getopts "h" option; do                                               
  case $option in                                                               
    h) usage;;                                                                  
  esac                                                                          
done                                                                            
shift "$((OPTIND-1))"

if [ -z "$ND280PILOT_ROOT" ]; then
  usage """Please source the nd280SoftwarePilot.profile script before running 
ERROR: this script"""
elif [ ${#1} = 0 ]; then
  usage "Wrong number of arguments. Two arguments are needed"
elif ! [[ ${2} =~ [0-9]+\.[0-9]+.* ]]; then
  usage """Incorrect version format. The second argument should be of the
ERROR: format <major>.<minor> or <major>.<minor>.<patch>"""
fi

package=$1
version=$2

echo "Creating new package \"${package}\" with version number $version..."
cd $ND280_ROOT
if [ -d ${package}_* ]; then
  usage "Package with that name already exists"
fi

mkdir ${package}_${version}
cd ${package}_${version}
mkdir cmake bin src inc lib build app dict doc 
cd cmake

touch ${package}Config.cmake ${package}ConfigVersion.cmake
touch ${package}ND280_USE.cmake ${package}PackageVersion.cmake CMakeLists.txt 
 
echo """include(\${${package}_DIR}/${package}ND280_USE.cmake)""" > ${package}Config.cmake
echo """# This is a basic version file for the Config-mode of find_package().
# It is used by write_basic_package_version_file() as input file for configure_file()
# to create a version-file which can be installed along a config.cmake file.
#
# The created file sets PACKAGE_VERSION_EXACT if the current version string and
# the requested version string are exactly the same and it sets
# PACKAGE_VERSION_COMPATIBLE if the current version is >= requested version.
# The variable CVF_VERSION must be set before calling configure_file().

include(\${CMAKE_CURRENT_LIST_DIR}/${package}PackageVersion.cmake)

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
  if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
  endif()
endif()

# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if(\"\${CMAKE_SIZEOF_VOID_P}\" STREQUAL \"\" OR \"8\" STREQUAL \"\")
   return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT CMAKE_SIZEOF_VOID_P STREQUAL \"8\")
   math(EXPR installedBits \"8 * 8\")
   set(PACKAGE_VERSION \"\${PACKAGE_VERSION} (\${installedBits}bit)\")
   set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()""" > ${package}ConfigVersion.cmake
echo """set(PACKAGE_VERSION \"${version}\" )""" > ${package}PackageVersion.cmake
echo """#ND280_USE( * )""" > ${package}ND280_USE.cmake
echo """# CMakeLists.txt for $package package. It creates a library with dictionary and a main program
cmake_minimum_required(VERSION 3.9 FATAL_ERROR)

find_package(nd280SoftwarePolicy 3.1)
if( NOT nd280SoftwarePolicy_FOUND) 
  message(FATAL_ERROR \" nd280SoftwarePolicy not found - abort \")
endif()

include(${package}PackageVersion.cmake)
ND280_PROJECT($package \${PACKAGE_VERSION})
include(${package}ND280_USE.cmake)

ND280_STANDARD_LIBRARY()
#ND280_EXECUTABLE( * )
ND280_END_PROJECT()""" > CMakeLists.txt

echo """Package ${package}_${version} created. 

Run 'nd280-init --apply' from the package's root directory to link it to the 
remote GitLab repository (you must have at least 'Maintainer' permissions to 
push the package to the remote repository)."""
