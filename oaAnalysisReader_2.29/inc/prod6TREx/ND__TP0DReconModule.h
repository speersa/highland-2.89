//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Nov  9 15:39:21 2016 by ROOT version 5.34/09)
//      from the StreamerInfo in file /Users/izmaylov/Downloads/oa_nt_beam_90210000-0000_2e7lhce5kvor_anal_000_prod6amagnet201011waterb-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TP0DReconModule_h
#define ND__TP0DReconModule_h
namespace ND {
class TP0DReconModule;
} // end of namespace.

#include "ND__TAnalysisReconModuleBase.h"
#include "TClonesArray.h"
#include "Riostream.h"
#include <vector>
#include "TPRegexp.h"
#include <map>
#include "TObject.h"
#include <string>
#include "TLorentzVector.h"
#include "TVector3.h"
namespace std {} using namespace std;
namespace std {} using namespace std;

namespace ND {
class TP0DReconModule : public ND::TAnalysisReconModuleBase {

public:
// Nested classes forward declaration.
class TP0DAlgoRes;
class TP0DVertex;
class TP0DParticle;
class TP0DShower;
class TP0DTrack;
class TP0DNode;
class TP0DHit;
class TP0DCluster;

public:
// Nested classes declaration.
class TP0DCluster : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   short         NFiducialHits;           //
   float         EDeposit;                //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   float          Moments[9];              //

   TP0DCluster();
   TP0DCluster(const TP0DCluster & );
   virtual ~TP0DCluster();

   ClassDef(TP0DCluster,8); // Generated by MakeProject.
};
class TP0DHit : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   UInt_t      GeomID;      ///< Geometry Id of the TSingleHit.
   UInt_t      ChanID;      ///< Channel Id of the TSingleHit.
   float       Charge;      //
   float       Time;        //

   TP0DHit();
   TP0DHit(const TP0DHit & );
   virtual ~TP0DHit();

   ClassDef(TP0DHit,2); // Generated by MakeProject.
};
class TP0DNode : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   vector<short> Hits;        //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   float         EDeposit;                //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   TVector3       Direction;               //
   TVector3       DirVariance;             //

   TP0DNode();
   TP0DNode(const TP0DNode & );
   virtual ~TP0DNode();

   ClassDef(TP0DNode,6); // Generated by MakeProject.
};
class TP0DTrack : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   int           Status;           //
   float         Quality;          //
   int           NDOF;             //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   float         EDeposit;                //
   float         SideDeposit;             //
   float         EndDeposit;              //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   TVector3       Direction;               //
   TVector3       DirVariance;             //
   float          Length;                  //

   TP0DTrack();
   TP0DTrack(const TP0DTrack & );
   virtual ~TP0DTrack();

   ClassDef(TP0DTrack,7); // Generated by MakeProject.
};
class TP0DShower : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   int           Status;           //
   float         Quality;          //
   int           NDOF;             //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   float         EDeposit;                //
   float         SideDeposit;             //
   float         EndDeposit;              //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   TVector3       Direction;               //
   TVector3       DirVariance;             //
   float          Cone;                    //
   float          Width;                   //
   float          Length;                  //

   TP0DShower();
   TP0DShower(const TP0DShower & );
   virtual ~TP0DShower();

   ClassDef(TP0DShower,6); // Generated by MakeProject.
};
class TP0DParticle : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   int           Status;           //
   float         Quality;          //
   int           NDOF;             //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   float         SideDeposit;             //
   float         EndDeposit;              //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   TVector3       Direction;               //
   TVector3       DirVariance;             //
   float          Momentum;                //
   float          Charge;                  ///< The reconstructed charge of the corresponding TReconPID.
   vector<string> realPIDNames;            //
   vector<vector<float> > realPIDValues;           //
   vector<string>         integerPIDNames;         //
   vector<vector<short> > integerPIDValues;        //
   vector<short>          PID;                     //
   vector<float>          PID_weight;              //

   TP0DParticle();
   TP0DParticle(const TP0DParticle & );
   virtual ~TP0DParticle();

   ClassDef(TP0DParticle,6); // Generated by MakeProject.
};
class TP0DVertex : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   int           Status;           //
   float         Quality;          //
   int           NDOF;             //
   vector<int>   Truth_PrimaryTrajIDs;    //
   vector<int>   Truth_TrajIDs;           //
   vector<short> Truth_HitCount;          //
   vector<float> Truth_ChargeShare;       //
   TLorentzVector Position;                //
   TLorentzVector PosVariance;             //
   short          ValidDimensions;         //
   float          Fiducial;                //

   TP0DVertex();
   TP0DVertex(const TP0DVertex & );
   virtual ~TP0DVertex();

   ClassDef(TP0DVertex,5); // Generated by MakeProject.
};
class TP0DAlgoRes : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //
   short       Cycle;            ///< The cycle number, based on the first hit.
   vector<short> Vertices;         //
   vector<short> Particles;        //
   vector<short> Tracks;           //
   vector<short> Showers;          //
   vector<short> Clusters;         //
   vector<short> Nodes;            //
   vector<short> Hits;             //
   short         NHits;            ///< A count of the Hits associated with this object.
   UInt_t        UniqueID;         //
   string        FullName;         //
   vector<short> AlgoResults;      //
   short         Parent;           //
   short         UsedHitCluster;    //
   short         UnusedHitCluster;    //

   TP0DAlgoRes();
   TP0DAlgoRes(const TP0DAlgoRes & );
   virtual ~TP0DAlgoRes();

   ClassDef(TP0DAlgoRes,6); // Generated by MakeProject.
};

public:
// Data Members.
   Short_t     fNAlgoResults;    ///<  The number of Algorithm Results
   Short_t     fNVertices;       ///<  The number of added vertices
   Short_t     fNParticles;      ///<  The number of particles
   Short_t     fNShowers;        ///<  The number of showers
   Short_t     fNTracks;         ///<  The number of tracks
   Short_t     fNNodes;          ///<  The number of track nodes
   Short_t     fNClusters;       ///<  The number of clusters
   Short_t     fNHits;           ///<  The number of hits that are saved
   TClonesArray* fAlgoResults;     ///<  The TP0DAlgoRes vector of Algorithm Results.
   TClonesArray* fVertices;        ///<  The TP0DVertex vector of vertices.
   TClonesArray* fParticles;       ///<  The TP0DParticle vector of particles.
   TClonesArray* fShowers;         ///<  The TP0DShower vector of showers.
   TClonesArray* fTracks;          ///<  The TP0DTrack vector of tracks.
   TClonesArray* fNodes;           ///<  The TP0DNode vector of nodes.
   TClonesArray* fHits;            ///<  The TP0DHit vector of hits.
   TClonesArray* fClusters;        ///<  The TP0DCluster vector of clusters
   vector<TPRegexp> fRejectAlgoResultList;    //
   std::map<UInt_t,short> fTempHitMap;              //

   TP0DReconModule();
   TP0DReconModule(const TP0DReconModule & );
   virtual ~TP0DReconModule();

   ClassDef(TP0DReconModule,6); // Generated by MakeProject.
};
} // namespace
#endif
