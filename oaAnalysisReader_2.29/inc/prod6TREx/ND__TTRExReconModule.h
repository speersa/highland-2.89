//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Nov  9 15:39:21 2016 by ROOT version 5.34/09)
//      from the StreamerInfo in file /Users/izmaylov/Downloads/oa_nt_beam_90210000-0000_2e7lhce5kvor_anal_000_prod6amagnet201011waterb-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TTRExReconModule_h
#define ND__TTRExReconModule_h
namespace ND {
class TTRExReconModule;
} // end of namespace.

#include "ND__TAnalysisReconModuleBase.h"
#include "TClonesArray.h"
#include "ND__TTRExReconModule.h"
#include "TObject.h"
#include "TVector3.h"
#include "TLorentzVector.h"

namespace ND {
class TTRExReconModule : public ND::TAnalysisReconModuleBase {

public:
// Nested classes forward declaration.
class TTPCAnaPattern;
class TTPCAnaPath;
class TTPCAnaJunction;

public:
// Nested classes declaration.
class TTPCAnaJunction : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   Int_t       JunctionID;    ///< A unique identifier for the junction within the
   Int_t       JunctionMatchingID;    //< A unique identifier for the junction within
   TLorentzVector Position;              ///< The spatial coordinates of the junction
   Int_t          NPaths;                ///< The number of paths connected to the junction.
   Int_t         *PathIDs;               //[NPaths]
   TVector3       MaximumCoordinates;    ///< The most extreme hit positions in the
   TVector3       MinimumCoordinates;    ///< The most extreme hit positions in the

   TTPCAnaJunction();
   TTPCAnaJunction(const TTPCAnaJunction & );
   virtual ~TTPCAnaJunction();

   ClassDef(TTPCAnaJunction,2); // Generated by MakeProject.
};
class TTPCAnaPath : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   Int_t       PathID;      ///< A unique identifier for the path within the pattern.
   Int_t       G4ID;        ///< G4 ID of the primary true trajectory associated with this
   Int_t       PathMatchingID;    //< A unique identifier for the path within the event.
   TVector3    FirstPosition;     ///< The start position of the path.
   TVector3    LastPosition;      ///< The end position of the path.
   Double_t    Time;              ///< The T0 for the path.
   Double_t    Length;            ///< The length of the path.
   Double_t    Momentum;          ///< The momentum of the path.
   Double_t    MomentumError;     ///< The momentum error of the path.
   TVector3    Direction;         ///< The direction of the path.
   Bool_t      IsContained;       ///< True if the path does not leave the TPC; false
   Bool_t      LikFit;            ///< True if the likelihood fit was performed
   Bool_t      Success;           ///< True if the likelihood fit succeeded
   Double_t    FitLikelihood;     ///< Value of log likelihood from fit
   Int_t       T0Source;          ///< Enumerator of T0 sources.
   Int_t       NClusters;         ///< Number of clusters in the path.
   Double_t    Charge;            ///< Charge of the path
   Double_t    ElePull;           //
   Double_t    EleExp;            //
   Double_t    EleSigma;          //
   Double_t    MuonPull;          //
   Double_t    MuonExp;           //
   Double_t    MuonSigma;         //
   Double_t    PionPull;          //
   Double_t    PionExp;           //
   Double_t    PionSigma;         //
   Double_t    ProtonPull;        //
   Double_t    ProtonExp;         //
   Double_t    ProtonSigma;       //
   Double_t    KaonPull;          //
   Double_t    KaonExp;           //
   Double_t    KaonSigma;         //
   Double_t    PDist;             //
   Double_t    PEField;           //
   Double_t    T0Range[2];        //
   Double_t    T0RangeDeltaX[2];    //
   Int_t       PID;                 ///< The PID of the path.
   Double_t    NetCharge;           ///< The total charge left by the path on the micromegas
   Int_t       NJunctions;          ///< The number of junctions to which the path connects.
   Int_t      *JunctionIDs;         //[NJunctions]
   Int_t       NMatchingPaths;      ///< The number of paths to which this path might be
   Int_t      *MatchingPathIDs;     //[NMatchingPaths]
   Double_t   *PathMatchingLikelihood;    //[NMatchingPaths]
   Int_t       NMatchingPatterns;         //
   Int_t      *MatchingPatternIDs;        //[NMatchingPatterns]
   Int_t      *MatchingPatternPathIDs;    //[NMatchingPatterns]
   Double_t   *PatternMatchingLikelihood;    //[NMatchingPatterns]

   TTPCAnaPath();
   TTPCAnaPath(const TTPCAnaPath & );
   virtual ~TTPCAnaPath();

   ClassDef(TTPCAnaPath,2); // Generated by MakeProject.
};
class TTPCAnaPattern : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   Bool_t      S1Sflag;     ///< A flag to say whether this pattern would pass the TPC
   Int_t       PatternID;    ///< The ID of the pattern
   Int_t       NJunctions;    ///< The number of junctions in the pattern.
   TClonesArray* Junctions;     ///< The constituent junctions of the pattern
   Int_t         NPaths;        ///< The number of paths.
   TClonesArray* Paths;         ///< The constituent paths of the pattern.
   Int_t         TPC;           ///< The TPC in which the pattern resides.

   TTPCAnaPattern();
   TTPCAnaPattern(const TTPCAnaPattern & );
   virtual ~TTPCAnaPattern();

   ClassDef(TTPCAnaPattern,2); // Generated by MakeProject.
};

public:
// Data Members.
   Int_t       fNPatterns;    //
   Bool_t      fIsMC;         //
   TClonesArray* fPatterns;     //
   ND::TTRExReconModule::TTPCAnaPath hackPath;      //
   ND::TTRExReconModule::TTPCAnaJunction hackPatten;    //

   TTRExReconModule();
   TTRExReconModule(const TTRExReconModule & );
   virtual ~TTRExReconModule();

   ClassDef(TTRExReconModule,2); // Generated by MakeProject.
};
} // namespace
#endif
