//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Nov  9 15:39:21 2016 by ROOT version 5.34/09)
//      from the StreamerInfo in file /Users/izmaylov/Downloads/oa_nt_beam_90210000-0000_2e7lhce5kvor_anal_000_prod6amagnet201011waterb-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TTrackerECALReconModule_h
#define ND__TTrackerECALReconModule_h
namespace ND {
class TTrackerECALReconModule;
} // end of namespace.

#include "ND__TAnalysisReconModuleBase.h"
#include "TClonesArray.h"
#include "TObject.h"
#include "TVector3.h"
#include "ND__TTrackerECALReconModule.h"
#include "Riostream.h"
#include <string>
#include "TLorentzVector.h"

namespace ND {
class TTrackerECALReconModule : public ND::TAnalysisReconModuleBase {

public:
// Nested classes forward declaration.
class TECALReconObject;
class TECALReconTrack;
class TECALReconShower;
class TECALReconCluster;
class TECALReconUnmatchedObject;
class TECALReconVertexCluster;

public:
// Nested classes declaration.
class TECALReconVertexCluster : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   UInt_t      UniqueID;    //
   Int_t       NHits;       //
   Float_t     TotalCharge;    //
   TLorentzVector Position;       //
   string         Module;         //
   Int_t          MinLayerHit;    //
   Int_t          MaxLayerHit;    //
   Int_t          MinParaBarHit;    //
   Int_t          MaxParaBarHit;    //
   Int_t          MinPerpBarHit;    //
   Int_t          MaxPerpBarHit;    //
   Int_t          N2DTracksMax;     //
   Int_t          N2DTracksMin;     //
   Int_t          G4IDSingle;       //
   Float_t        CompletenessSingle;    //
   Float_t        CleanlinessSingle;     //
   Int_t          G4IDPrimary;           //
   Float_t        CompletenessPrimary;    //
   Float_t        CleanlinessPrimary;     //
   Int_t          G4IDRecursive;          //
   Float_t        CompletenessRecursive;    //
   Float_t        CleanlinessRecursive;     //
   Int_t          NTracks;                  //
   TClonesArray*  Tracks;                   //
   Int_t          NCrossings;               //
   TClonesArray*  Crossings;                //

   TECALReconVertexCluster();
   TECALReconVertexCluster(const TECALReconVertexCluster & );
   virtual ~TECALReconVertexCluster();

   ClassDef(TECALReconVertexCluster,2); // Generated by MakeProject.
};
class TECALReconUnmatchedObject : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         NHits;       //
   int         View;        //
   double      TotalHitCharge;    //
   double      AverageHitTime;    //
   TVector3    FrontPosition;     //
   TVector3    BackPosition;      //
   int         mostUpStreamLayerHit;    //
   int         mostDownStreamLayerHit;    //
   Int_t       G4ID;                      //
   Int_t       G4ID_Primary;              //
   Int_t       G4ID_Recursive;            //
   Int_t       G4ID_Single;               //

   TECALReconUnmatchedObject();
   TECALReconUnmatchedObject(const TECALReconUnmatchedObject & );
   virtual ~TECALReconUnmatchedObject();

   ClassDef(TECALReconUnmatchedObject,2); // Generated by MakeProject.
};
class TECALReconCluster : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   TLorentzVector Position;    //
   TLorentzVector PositionVar;    //
   int            NDOF;           //
   double         EDeposit;       //

   TECALReconCluster();
   TECALReconCluster(const TECALReconCluster & );
   virtual ~TECALReconCluster();

   ClassDef(TECALReconCluster,2); // Generated by MakeProject.
};
class TECALReconShower : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   TVector3    ConeAngle;    //
   TVector3    Direction;    //
   double      EDeposit;     //
   TLorentzVector Position;     //
   TLorentzVector PositionVar;    //
   TLorentzVector BackPosition;    //

   TECALReconShower();
   TECALReconShower(const TECALReconShower & );
   virtual ~TECALReconShower();

   ClassDef(TECALReconShower,2); // Generated by MakeProject.
};
class TECALReconTrack : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   TVector3    Direction;    //
   double      EDeposit;     //
   TLorentzVector Position;     //
   TLorentzVector PositionVar;    //
   TLorentzVector BackPosition;    //

   TECALReconTrack();
   TECALReconTrack(const TECALReconTrack & );
   virtual ~TECALReconTrack();

   ClassDef(TECALReconTrack,2); // Generated by MakeProject.
};
class TECALReconObject : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         Radon_XY_First_Prong_NHits;    //
   int         Radon_XY_First_Prong_Angle;    //
   int         Radon_XY_First_Prong_Distance;    //
   int         Radon_XY_Second_Prong_NHits;      //
   int         Radon_XY_Second_Prong_Angle;      //
   int         Radon_XY_Second_Prong_Distance;    //
   int         Radon_XY_Third_Prong_NHits;        //
   int         Radon_XY_Third_Prong_Angle;        //
   int         Radon_XY_Third_Prong_Distance;     //
   int         Radon_XZ_First_Prong_NHits;        //
   int         Radon_XZ_First_Prong_Angle;        //
   int         Radon_XZ_First_Prong_Distance;     //
   int         Radon_XZ_Second_Prong_NHits;       //
   int         Radon_XZ_Second_Prong_Angle;       //
   int         Radon_XZ_Second_Prong_Distance;    //
   int         Radon_XZ_Third_Prong_NHits;        //
   int         Radon_XZ_Third_Prong_Angle;        //
   int         Radon_XZ_Third_Prong_Distance;     //
   int         Radon_YZ_First_Prong_NHits;        //
   int         Radon_YZ_First_Prong_Angle;        //
   int         Radon_YZ_First_Prong_Distance;     //
   int         Radon_YZ_Second_Prong_NHits;       //
   int         Radon_YZ_Second_Prong_Angle;       //
   int         Radon_YZ_Second_Prong_Distance;    //
   int         Radon_YZ_Third_Prong_NHits;        //
   int         Radon_YZ_Third_Prong_Angle;        //
   int         Radon_YZ_Third_Prong_Distance;     //
   TVector3    Radon_3D_First_Prong_Direction;    //
   int         Radon_3D_First_Prong_NHits;        //
   TVector3    Radon_3D_Second_Prong_Direction;    //
   int         Radon_3D_Second_Prong_NHits;        //
   TVector3    Radon_3D_Third_Prong_Direction;     //
   int         Radon_3D_Third_Prong_NHits;         //
   ND::TTrackerECALReconModule::TECALReconTrack Track;                              //
   ND::TTrackerECALReconModule::TECALReconShower Shower;                             //
   ND::TTrackerECALReconModule::TECALReconCluster Cluster;                            //
   UInt_t                                         UniqueID;                           //
   Int_t                                          G4ID;                               //
   Int_t                                          G4ID_Primary;                       //
   Double_t                                       Completeness_Primary;               //
   Double_t                                       Cleanliness_Primary;                //
   Int_t                                          G4ID_Recursive;                     //
   Int_t                                          G4ID_Recursive2;                    //
   Int_t                                          G4ID_Recursive3;                    //
   Int_t                                          G4ID_Recursive4;                    //
   Double_t                                       Completeness_Recursive;             //
   Double_t                                       Cleanliness_Recursive;              //
   Int_t                                          G4ID_Single;                        //
   Double_t                                       Completeness_Single;                //
   Double_t                                       Cleanliness_Single;                 //
   Int_t                                          NHits;                              //
   Int_t                                          NIsXHits;                           //
   Int_t                                          NIsYHits;                           //
   Int_t                                          NIsZHits;                           //
   Int_t                                          NLayersHit;                         //
   Int_t                                          maxPerpBarHit;                      //
   Int_t                                          maxParaBarHit;                      //
   Int_t                                          minBarHit;                          //
   Int_t                                          mostUpStreamLayerHit;               //
   Int_t                                          mostDownStreamLayerHit;             //
   Double_t                                       TotalHitCharge;                     //
   Double_t                                       AverageHitTime;                     //
   string                                         Module;                             //
   Double_t                                       ObjectLength;                       //
   double                                         PID_Circularity;                    //
   double                                         PID_Angle;                          //
   double                                         PID_ShowerAngle;                    //
   double                                         PID_Asymmetry;                      //
   double                                         PID_TruncatedMaxRatio;              //
   double                                         PID_TransverseChargeRatio;          //
   double                                         PID_FrontBackRatio;                 //
   double                                         Containment;                        //
   double                                         PID_LLR_MIP_EM;                     //
   double                                         PID_LLR_MIP_Pion;                   //
   double                                         PID_LLR_EM_HIP;                     //
   double                                         PID_LLR_MIP_EM_LowMomentum;         //
   double                                         AverageZPosition;                   //
   double                                         EMEnergyFit_Result;                 //
   double                                         EMEnergyFit_Uncertainty;            //
   double                                         EMEnergyFit_Likelihood_energyGrad;    //
   double                                         EMEnergyFit_Likelihood_energy_qsumGrad;    //
   double                                         EMEnergyFit_Likelihood_qsum_like;          //
   double                                         EMEnergyFit_Para_QSum;                     //
   double                                         EMEnergyFit_Para_QMean;                    //
   double                                         EMEnergyFit_Para_QRMS;                     //
   double                                         EMEnergyFit_Para_QSkew;                    //
   double                                         Thrust;                                    //
   TVector3                                       ThrustOrigin;                              //
   TVector3                                       ThrustAxis;                                //
   double                                         MatchingLikelihood;                        //
   int                                            NHitsAtLayersWithManyHits;                 //
   int                                            NLayersTwoHits;                            //
   int                                            NLayersThreeHits;                          //
   int                                            FirstLayerManyHits;                        //
   int                                            LastLayerManyHits;                         //
   int                                            MaxHitsInALayer;                           //
   int                                            MaxHitChargeLayer;                         //
   TVector3                                       Pointing;                                  //

   TECALReconObject();
   TECALReconObject(const TECALReconObject & );
   virtual ~TECALReconObject();

   ClassDef(TECALReconObject,2); // Generated by MakeProject.
};

public:
// Data Members.
   Int_t       fNUnmatchedObjects;    //
   Int_t       fNReconVertexClusters;    //
   double      total;                    //
   bool        fIsMC;                    //
   TClonesArray* fUnmatchedObjects;        //
   TClonesArray* fReconVertexClusters;     //

   TTrackerECALReconModule();
   TTrackerECALReconModule(const TTrackerECALReconModule & );
   virtual ~TTrackerECALReconModule();

   ClassDef(TTrackerECALReconModule,2); // Generated by MakeProject.
};
} // namespace
#endif
