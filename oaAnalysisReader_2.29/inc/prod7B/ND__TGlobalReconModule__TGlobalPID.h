//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Tue Sep  4 09:00:22 2018 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../../../../Files/Prod7/7B_new_iteration/oa_nt_beam_90400000-0000_jrvqx3jehzgh_anal_000_prod6amagnet201011airc-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TGlobalReconModule__TGlobalPID_h
#define ND__TGlobalReconModule__TGlobalPID_h
namespace ND {
namespace TGlobalReconModule {
class TGlobalPID;
} // end of namespace.
} // end of namespace.

#include "TObject.h"
#include "Riostream.h"
#include <vector>
#include <string>
#include "TVector3.h"
#include "TLorentzVector.h"
#include <utility>
#include "TVector2.h"
#include "TClonesArray.h"
#include "ND__TTrueParticle.h"
#include "ND__TGlobalReconModule__TTPCObject.h"
#include "ND__TGlobalReconModule__TFGDObject.h"
#include "ND__TGlobalReconModule__TECALObject.h"
#include "ND__TGlobalReconModule__TP0DObject.h"
#include "ND__TGlobalReconModule__TSMRDObject.h"
#include "ND__TGlobalReconModule__TTrackerObject.h"
#include "ND__TGlobalReconModule__TGlobalPIDAlternate.h"

namespace ND {
namespace TGlobalReconModule {
class TGlobalPID : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   UInt_t      UniqueID;    ///< Unique identifier for global recon objects (needed fro broken association)
   vector<UInt_t> BrokenUniqueIDs;    ///< the broken partners unique IDs
   string         AlgorithmName;      ///< The name of the algorithm that created this object.
   unsigned long  Detectors;          ///<     Detectors used
   bool           DetectorUsed[19];    ///< Detectors used. Index order from 0 to 18: [TPC1, TPC2, TPC3, FGD1, FGD2,P0D, DSECal, TopSMRD, BottomSMRD, LeftSMRD, RightSMRD, TopPECal, BottomPECal, LeftPECal, RightPECal, TopTECal, BottomTECal, LeftTECal, RightTECal].
   unsigned long  Status;              ///< The status for the fit.
   int            NDOF;                ///< The number of degrees of freedom.
   double         Chi2;                ///< The chi2 of the fit.
   int            NNodes;              ///< The number of nodes.
   int            NHits;               ///< The number of hits.
   int            NConstituents;       ///< The number of constituents.
   bool           isForward;           ///< Sense of object.
   bool           SenseOK;             ///< Sense of object.
   bool           IsCurvBack;          ///< A curving-back object
   bool           IsFgdECalIncremental;    ///< A track created by FGD-ECal matching algorithm
   double         Charge;                  ///< The Charge
   double         EDeposit;                ///< The deposited charge for the object.
   TVector3       Cone;                    ///< The opening angles of the cone (only for showers)
   double         Width;                   ///< The width of the shower (perpendicular to the direction)
   double         Length;                  ///< The length of the track or shower (RMS)
   vector<int>    ParticleIds;             ///< the PDG codes obtained in the recon combined PID
   vector<double> PIDWeights;              ///< the PID likelihoods for combined PID
   TLorentzVector FrontPosition;           ///< The position of the object.
   TLorentzVector BackPosition;            ///< The position of the object
   TVector3       FrontDirection;          ///< The direction of the object.
   TVector3       BackDirection;           ///< The direction of the object.
   double         FrontMomentum;           ///< the momentum of the object
   double         FrontCharge;             ///< the charge of the object at the first state
   double         BackMomentum;            ///< the momentum of the object
   double         BackCharge;              ///< the momentum of the object at the back state
   double         FrontMomentumError;      ///< the error on the momentum of the object
   double         BackMomentumError;       ///< the error on the momentum of the object
   double         FrontStateCov[7][7];     ///< full covariance matrix for front state: pos,  dir, qp
   double         BackStateCov[7][7];      ///< full covariance matrix for last state: pos, dir, qp
   double         RangeMomentumMuon;       ///< the momentum by range for the muon hypothesis
   double         RangeMomentumMuonFlip;    ///< the momentum by range for the flipped muon hypothesis
   double         RangeMomentumElectron;    ///< the momentum by range for the electron hypothesis
   double         RangeMomentumElectronFlip;    ///< the momentum by range for the flipped electron hypothesis
   double         RangeMomentumProton;          ///< the momentum by range for the proton hypothesis
   double         RangeMomentumProtonFlip;      ///< the momentum by range for the flipped proton hypothesis
   vector<pair<int,TVector2> > NodeTimes;                    ///< vector of pairs, sub-detecor number and time-stamps of edge nodes in this subdetector
   TLorentzVector              PositionAtTrueVertex;         ///< Position at the true vertex.
   TVector3                    DirectionAtTrueVertex;        ///< Direction at the true vertex.
   double                      MomentumAtTrueVertex;         ///< Momentum at the true vertex.
   double                      MomentumErrorAtTrueVertex;    ///< Error of the momentum at the true vertex.
   double                      ChargeAtTrueVertex;           ///< Charge at the true vertex.
   double                      StateCovAtTrueVertex[7][7];    ///< Full covariance matrix for the state: pos,  dir, qp at the true vertex.
   int                         EntranceOK[25];                ///< Status of the subdetector entrance.
   int                         ExitOK[25];                    ///< Status of the subdetector exit.
   TLorentzVector              EntrancePosition[25];          ///< The position of the object at the entrance of each subdetector.
   TLorentzVector              ExitPosition[25];              ///< The position of the object at the exit of each subdetector.
   TVector3                    EntranceDirection[25];         ///< The direction of the object at the entrance of each subdetector volume.
   TVector3                    ExitDirection[25];             ///< The direction of the object at the exit of each subdetector.
   double                      EntranceMomentum[25];          ///< The momentum of the object at the entrance of each subdetector.
   double                      ExitMomentum[25];              ///< The momentum of the object at the exit of each subdetector.
   TLorentzVector              EntrancePositionErr[25];       ///< The error of the position of the object at the entrance of each subdetector.
   TLorentzVector              ExitPositionErr[25];           ///< The error of the position of the object at the exit of each subdetector.
   TVector3                    EntranceDirectionErr[25];      ///< The error of the direction of the object at the entrance of each subdetector.
   TVector3                    ExitDirectionErr[25];          ///< The error of the direction of the object at the exit of each subdetector.
   double                      EntranceMomentumErr[25];       ///< The error of the momentum of the object at the entrance of each subdetector.
   double                      ExitMomentumErr[25];           ///< The error of the momentum of the object at the exit of each subdetector.
   Int_t                       NHitsSaved;                    ///< Number of entries in the HitsSaved array.
   TClonesArray*               HitsSaved;                     ///< the two first and two last hits (TGlobalHit).
   ND::TTrueParticle           TrueParticle;                  ///< The true particle
   Int_t                       NTRACKERs;                     ///< Number of Tracker objects.
   TClonesArray*               TRACKER;                       ///< Tracker specific variables.
   Int_t                       NTPCs;                         ///< Number of TPC objects.
   TClonesArray*               TPC;                           ///< TPC specific variables.
   Int_t                       NFGDs;                         ///< Number of FGD objects.
   TClonesArray*               FGD;                           ///< FGD specific variables.
   Int_t                       NECALs;                        ///< Number of ECAL objects.
   Int_t                       NDsECALs;                      ///< Number of DsECAL objects.
   Int_t                       NTrECALs;                      ///< Number of TrECAL objects.
   TClonesArray*               ECAL;                          ///< ECAL specific variables.
   Int_t                       NP0DECALs;                     ///< Number of P0DECAL objects.
   TClonesArray*               P0DECAL;                       ///< P0DECAL specific variables.
   Int_t                       NP0Ds;                         ///< Number of P0D objects.
   TClonesArray*               P0D;                           ///< P0D specific variables.
   Int_t                       NSMRDs;                        ///< Number of SMRD objects.
   TClonesArray*               SMRD;                          ///< SMRD specific variables.
   Int_t                       NAlternates;                   ///< Number of entries in the alternate hypotheses list.
   TClonesArray*               Alternates;                    ///< List of alternate hypotheses
   vector<int>                 TPCGasPatternIDs;              ///< The IDs of the TREx patterns which contributed to the object
   vector<int>                 TPCGasPathIDs;                 ///< The IDs of the TREx paths which contributed to the object
   vector<int>                 TPCGasJunctionIDs;             ///< The IDs of the TREx junctions which contributed to the object
   ND::TGlobalReconModule::TTPCObject hackTPCObject;                 ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TFGDObject hackFGDObject;                 ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TECALObject hackECALObject;                ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TP0DObject  hackP0DObject;                 ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TSMRDObject hackSMRDObject;                ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TTrackerObject hackTrackerObject;             ///< This is just here to fool TFile::MakeProject, not a real object.
   ND::TGlobalReconModule::TGlobalPIDAlternate hackGlobalPIDAlternate;        ///< This is just here to fool TFile::MakeProject, not a real object.

   TGlobalPID();
   TGlobalPID(const TGlobalPID & );
   virtual ~TGlobalPID();

   ClassDef(TGlobalPID,2); // Generated by MakeProject.
};
} // namespace
} // namespace
// 03.02.2021: [AI] comment this out since leads to object being added twice
//#ifdef __MAKECINT__
//#pragma link C++ class pair<int,TVector2>+;
//#endif
#endif
