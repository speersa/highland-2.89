//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Fri Jul 15 18:05:54 2022 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../oa_nt_beam_90400000-0000_2sxl5m3goua7_anal_000_magnet201011airrun4-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__NRooTrackerVtx_h
#define ND__NRooTrackerVtx_h
namespace ND {
class NRooTrackerVtx;
} // end of namespace.

#include "ND__JNuBeamFlux.h"
#include "TObjString.h"

namespace ND {
class NRooTrackerVtx : public ND::JNuBeamFlux {

public:
// Nested classes declaration.

public:
// Data Members.
   TObjString* EvtCode;     //Generator-specific string with 'event code'
   int         EvtNum;      //event num.
   double      EvtXSec;     //cross section for selected event (1E-38 cm2)
   double      EvtDXSec;    //Cross section for selected event kinematics (1E-38 cm2 /{K^n})
   double      EvtWght;     //Weight for event
   double      EvtProb;     //Probability  event (given cross section, path lengths, etc)
   double      EvtVtx[4];    //Event vertex position in detector coord syst (SI)
   int         StdHepN;      //Number of particles in particle array
   Int_t      *StdHepPdg;    //[StdHepN] dg codes (& generator specific codes for pseudoparticles)
   Int_t      *StdHepStatus;    //[StdHepN] generator-specific status code
   double      StdHepX4[100][4];    //4-x (x, y, z, t) of particle in hit nucleus frame (fm)
   double      StdHepP4[100][4];    //4-p (px,py,pz,E) of particle in LAB frame (GeV)
   double      StdHepPolz[100][3];    //polarization vector
   Int_t      *StdHepFd;              //[StdHepN] first daughter
   Int_t      *StdHepLd;              //[StdHepN]  last daughter
   Int_t      *StdHepFm;              //[StdHepN]  first mother
   Int_t      *StdHepLm;              //[StdHepN]  last mother
   int         NEnvc;                 //NEUT native VCWORK information    Number of particles
   Int_t      *NEipvc;                //[NEnvc] PDG particle code
   float       NEpvc[100][3];         //3-momentum (MeV/c)
   Int_t      *NEiorgvc;              //[NEnvc] Index of parent (Fortran convention: starting at 1)
   Int_t      *NEiflgvc;              //[NEnvc]  Flag of final state
   Int_t      *NEicrnvc;              //[NEnvc] Escaped nucleus (1) or not (0)
   float       NEcrsx;                //\brief Cross section calculation variables (x) (currently used for coherent  interactions)
   float       NEcrsy;                //\brief Cross section calculation variables (y) (currently used for coherent  interactions)
   float       NEcrsz;                //\brief Cross section calculation variables  (z) (currently used for coherent    interactions)
   float       NEcrsphi;              //\brief Cross section calculation variables (phi) (currently used for coherent    interactions)
   int         NEnvert;               //Number of vertices (including production and exit points)
   float       NEposvert[100][3];     //Position of vertex within nucleus (fm)
   Int_t      *NEiflgvert;            //[NEnvert]  Interaction type
   int         NEnvcvert;             //Number of intermediate particles (including initial and final)
   float       NEdirvert[300][3];     //Direction of particle
   Float_t    *NEabspvert;            //[NEnvcvert] Absolute momentum in the lab frame (MeV/c)
   Float_t    *NEabstpvert;           //[NEnvcvert] Absolute momentum in the nucleon rest frame (MeV/c)
   Int_t      *NEipvert;              //[NEnvcvert] PDG particle code
   Int_t      *NEiverti;              //[NEnvcvert] Index of initial vertex (pointing to nvert array above)
   Int_t      *NEivertf;              //[NEnvcvert] Index of final vertex (pointing to nvert array above)
   int         NFnvert;               //\brief Number of "vertices"
   Int_t      *NFiflag;               //[NFnvert]  4-digit flag for interaction type at i-th vertex
   Float_t    *NFx;                   //[NFnvert]  x-component of i-th vertex position inside nucleus
   Float_t    *NFy;                   //[NFnvert] y-component of i-th vertex position inside nucleus
   Float_t    *NFz;                   //[NFnvert] z-component of i-th vertex position inside nucleus
   Float_t    *NFpx;                  //[NFnvert] x-component of momentum of nucleon leaving the i-th vertex
   Float_t    *NFpy;                  //[NFnvert] y-component of momentum of nucleon leaving the i-th vertex
   Float_t    *NFpz;                  //[NFnvert] z-component of momentum of nucleon leaving the i-th vertex
   Float_t    *NFe;                   //[NFnvert] energy of nucleon leaving the i-th vertex
   Int_t      *NFfirststep;           //[NFnvert]  first step index of this track (to obtain the CMS energies for each step)
   int         NFnstep;               //number of steps
   Float_t    *NFecms2;               //[NFnstep] CMS energy squared of collision at k-th step (i.e. before interacting).
   float       PCascProb;             //The overall probability for the nucelon FSI cascade. Used for nucleon FSI reweighting.
   Float_t    *Prob;                  //[NFnstep] A step-wise probability for the nucleon FSI cascade.
   Float_t    *VertFlagStep;          //[NFnstep] Gives the interaction type of a step: 5 = non event, 4 = survival, 3 = douple pi, 2 = single pi, 1 = elastic
   Float_t    *VertFsiRhon;           //[NFnstep] Prob multiplied by rhon from nrfermi.F in NEUT.
   Float_t    *StepPel;               //[NFnstep] A step-wise probability for elastic nucleon scatter scattering.
   Float_t    *StepPsp;               //[NFnstep] A step-wise probability for single pion production via nucleon FSI.
   Float_t    *StepPdp;               //[NFnstep]  A step-wise probability for double pion production via nucleon FSI.
   int         SPIDelta;              //SPIDelta flag for resonance decay reweighting
   TObjString* GeomPath;              //
   TObjString* GeneratorName;         //
   TObjString* OrigFileName;          //
   TObjString* OrigTreeName;          //
   int         OrigEvtNum;            //
   int         OrigTreeEntries;       //
   double      OrigTreePOT;           //
   double      TimeInSpill;           //
   int         TruthVertexID;         //

   NRooTrackerVtx();
   NRooTrackerVtx(const NRooTrackerVtx & );
   virtual ~NRooTrackerVtx();

   ClassDef(NRooTrackerVtx,2); // Generated by MakeProject.
};
} // namespace
#endif
