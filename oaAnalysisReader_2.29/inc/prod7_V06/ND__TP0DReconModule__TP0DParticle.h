//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Fri Jul 15 18:05:56 2022 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../oa_nt_beam_90400000-0000_2sxl5m3goua7_anal_000_magnet201011airrun4-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TP0DReconModule__TP0DParticle_h
#define ND__TP0DReconModule__TP0DParticle_h
namespace ND {
namespace TP0DReconModule {
class TP0DParticle;
} // end of namespace.
} // end of namespace.

#include "TObject.h"
#include "Riostream.h"
#include <string>
#include <vector>
#include "TLorentzVector.h"
#include "TVector3.h"
namespace std {} using namespace std;
namespace std {} using namespace std;

namespace ND {
namespace TP0DReconModule {
class TP0DParticle : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //The name of the p0dRecon algorithm that created this object.
   short       Cycle;            //The cycle number, based on the first hit.
   vector<short> Vertices;         //Holds internal Ids of Vertices pertinent to this reconstructed particle.
   vector<short> Particles;        //Holds internal Ids of Particles pertinent to this reconstructed  particle.
   vector<short> Tracks;           //Holds internal Ids of Tracks pertinent to this reconstructed particle.
   vector<short> Showers;          //Holds internal Ids of Showers pertinent to this reconstructed particle.
   vector<short> Clusters;         //Holds internal Ids of Clusters pertinent to this reconstructed particle.
   vector<short> Nodes;            //Holds internal Ids of Nodes pertinent to this reconstructed particle  (probably not what you want for a TP0DParticle).  This vector has the  index in the ND::TP0DReconModule::fNodes vector of the nodes  associated with this object. The nodes for a TP0DParticle don't hold  the expected information for most P0D analyses, so you probably should  be accessing the nodes of the constituent track.
   vector<short> Hits;             //Holds internal Ids of Hits pertinent to this  reconstructed particle.
   short         NHits;            //A count of the Hits associated with this object.
   unsigned int  UniqueID;         //The Unique ID of the corresponding ND::TReconPID, used for  global-subdetector matching.
   int           Status;           //The reported Status of the corresponding ND::TReconPID.
   float         Quality;          //The reported reconstruction 'quality' of the corresponding  ND::TReconPID.
   int           NDOF;             //The Number of Degrees of Freedom in the reconstruction of the
   vector<int>   Truth_PrimaryTrajIDs;    //The vector of primary true trajectory IDs which contribute to the     ND::THits which are constituents of this vertex.
   vector<int>   Truth_TrajIDs;           //The vector of true trajectory IDs which contribute to the  ND::THits which are constituents of this vertex.
   vector<short> Truth_HitCount;          //The number of THits that each truth trajectory contributed to.
   vector<float> Truth_ChargeShare;       //The weighted reconstructed charge deposited by each truth  trajectory.
   float         SideDeposit;             //The deposited charge in the side bars.
   float         EndDeposit;              //The deposited charge in the end p0dules.
   TLorentzVector Position;                //Position of the TPIDState of the corresponding ND::TReconPID.
   TLorentzVector PosVariance;             //Variance on the position of the TPIDState of the corresponding  ND::TReconPID.
   short          ValidDimensions;         //Bit flag demarkating valid dimensions for this particle's position.
   TVector3       Direction;               //Direction of the TPIDState of the corresponding ND::TReconPID.
   TVector3       DirVariance;             //Variance on the TP0DParticle::Direction of the TPIDState of the  corresponding ND::TReconPID.
   float          Momentum;                //The reconstructed momentum of the corresponding TReconPID.
   float          Charge;                  //The reconstructed charge of the corresponding TReconPID.
   vector<string> realPIDNames;            //Holds the variable names of ND::TRealDatum stored in the TReconPID.
   vector<vector<float> > realPIDValues;           //Holds the PID variable values from ND::TRealDatum stored in the  TReconPID.
   vector<string>         integerPIDNames;         //Holds the variable names of ND::TIntegerDatum stored in the TReconPID.
   vector<vector<short> > integerPIDValues;        //Holds the PID variable values from ND::TIntegerDatum stored in the TReconPID.
   vector<short>          PID;                     //Potential PIDs (ND::TReconPID::ParticleId) matching with
   vector<float>          PID_weight;              //PID weights for each PID in TP0DParticle::PID.

   TP0DParticle();
   TP0DParticle(const TP0DParticle & );
   virtual ~TP0DParticle();

   ClassDef(TP0DParticle,6); // Generated by MakeProject.
};
} // namespace
} // namespace
#endif
