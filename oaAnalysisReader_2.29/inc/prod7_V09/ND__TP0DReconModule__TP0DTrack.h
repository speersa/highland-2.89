//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Jan 11 14:09:43 2023 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../oa_nt_beam_80710119-0055_df7igapcoooo_anal_000_nu-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TP0DReconModule__TP0DTrack_h
#define ND__TP0DReconModule__TP0DTrack_h
namespace ND {
namespace TP0DReconModule {
class TP0DTrack;
} // end of namespace.
} // end of namespace.

#include "TObject.h"
#include "Riostream.h"
#include <string>
#include <vector>
#include "TLorentzVector.h"
#include "TVector3.h"

namespace ND {
namespace TP0DReconModule {
class TP0DTrack : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   string      AlgorithmName;    //The name of the p0dRecon algorithm that created this object.
   short       Cycle;            //The cycle number, based on the first hit.
   vector<short> Vertices;         //Holds internal Ids of Vertices pertinent to this reconstructed track.
   vector<short> Particles;        //Holds internal Ids of Particles pertinent to this reconstructed track.
   vector<short> Tracks;           //Holds internal Ids of Tracks pertinent to this reconstructed track.
   vector<short> Showers;          //Holds internal Ids of Showers pertinent to this reconstructed track.
   vector<short> Clusters;         //Holds internal Ids of Clusters pertinent to this reconstructed track.
   vector<short> Nodes;            //Holds internal Ids of Nodes pertinent to this reconstructed track.
   vector<short> Hits;             //Holds internal Ids of Hits pertinent to this reconstructed track.
   short         NHits;            //A count of the Hits associated with this object.
   unsigned int  UniqueID;         //The Unique ID of the corresponding ND::TReconTrack, used for  global-subdetector matching.
   int           Status;           //The reported Status of the corresponding ND::TReconTrack.
   float         Quality;          //The reported reconstruction 'quality' of the corresponding  ND::TReconTrack.
   int           NDOF;             //The Number of Degrees of Freedom in the reconstruction of the  corresponding ND::TReconTrack.
   vector<int>   Truth_PrimaryTrajIDs;    //The vector of primary true trajectory IDs which contribute to the ND::THits which are constituents of this track.
   vector<int>   Truth_TrajIDs;           //The vector of true trajectory IDs which contribute to the  ND::THits which are constituents of this track.
   vector<short> Truth_HitCount;          //The number of THits that each truth trajectory contributed to.
   vector<float> Truth_ChargeShare;       //The weighted reconstructed charge deposited by each truth  trajectory.
   float         EDeposit;                //The total reconstructed energy deposit of the corresponding  ND::TReconTrack.
   float         SideDeposit;             //The deposited charge in the side bars.
   float         EndDeposit;              //The deposited charge in the end p0dules.
   TLorentzVector Position;                //Position of the TTrackState of the corresponding ND::TReconTrack.
   TLorentzVector PosVariance;             //Variance on the position of the TTrackState of the corresponding  ND::TReconTrack.
   short          ValidDimensions;         //Bit flag demarkating valid dimensions for this track's position.
   TVector3       Direction;               //Direction of the TTrackState of the corresponding ND::TReconTrack.
   TVector3       DirVariance;             //Variance on the TP0DTrack::Direction of the TTrackState of the  corresponding ND::TReconTrack.
   float          Length;                  //The length of the track calculated by summing over the distances

   TP0DTrack();
   TP0DTrack(const TP0DTrack & );
   virtual ~TP0DTrack();

   ClassDef(TP0DTrack,7); // Generated by MakeProject.
};
} // namespace
} // namespace
#endif
