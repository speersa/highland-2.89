//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Apr  5 14:16:34 2023 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../oa_nt_beam_80600124-0055_f72mofocwqdr_anal_000_nu-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TP0DECALReconModule__TP0DECALReconTrack_h
#define ND__TP0DECALReconModule__TP0DECALReconTrack_h
namespace ND {
namespace TP0DECALReconModule {
class TP0DECALReconTrack;
} // end of namespace.
} // end of namespace.

#include "TObject.h"
#include "TVector3.h"
#include "TLorentzVector.h"
#include "Riostream.h"
#include <string>

namespace ND {
namespace TP0DECALReconModule {
class TP0DECALReconTrack : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   unsigned int UniqueID;    //The object UniqueID which can be used to match this object to the Global Recon object.
   double       Curvature;    //The curvature around the x axis of the corresponding TReconTrack.
   TVector3     Direction;    //The Direction of the corresponding TReconTrack.
   double       EDeposit;     //The reconstructed energy deposited by the corresponding TReconTrack.
   int          NDOF;         //\short The Number of Degrees of Freedom in the reconstruction of the
   TLorentzVector Position;     //The reconstructed starting 4-position of the TReconTrack.  Uses ND::TReconTrack::GetPosition.
   double         Quality;      //The 'quality' of the reconstruction according to the relevant  TReconTrack, from ND::TReconBase::GetQuality.
   TVector3       Width;        //The 'width' of the corresponding TReconTrack.
   double         AMR;          //PID Variable: Axis Max Ratio - the ratio of primary and secondary  components of a 2D PCA.
   double         CWTrackWidth;    //\short PID Variable: Width of the track in bars, weighted by the charge  in each bar.
   double         Max_Ratio;       //\short PID Variable: The ratio between highest and lowest hit charges in  the reconstruction cluster.
   double         NormChargeSD;    //\short PID Variable: Normalised standard deviation of the contributing  reconstructed hit charges.
   double         PathChargeRatio;    //\short The ratio of total hit charges between the front half and back  half of the TReconTrack.
   double         TrShval;            //\short PID Variable: The output of the ANN using the other PID Variables  as input. Track-like events have a TrShval close to '1'.
   int            NHits;              //The number of THits which contributed to this reconstruction cluster.
   TVector3       BenCWPosition;      //Ben Smith's charge weighted reconstruction position.
   int            StackNo;            //The stack in which the TReconTrack resides. Uses  TReconBase::GetDetector.
   string         Module;             //The name of the module in which the TReconTrack resides.
   int            TrueID;             //For MC events: The Id of the corresponding ND::TG4Trajectory.
   int            TruePDG;            //For MC events: The PDG code of the true particle.
   int            TrueParentID;       //For MC events: The Id of the true trajectory's parent  ND::TG4Trajectory
   double         TrueHitPurity;      //For MC events: The 'cleanliness' of the ND::THits which make up  the corresponding ND::TReconTrack.
   double         TrueHitEfficiency;    //For MC events: The 'completeness' of the ND::THits which make up  the corresponding ND::TReconTrack.
   TLorentzVector TrueInitPos;          //For MC events: The true initial position of the corresponding  ND::TG4Trajectory.
   TLorentzVector TrueFinalPos;         //For MC events: The true final position of the corresponding  ND::TG4Trajectory.
   TLorentzVector TrueInitMom;          //For MC events: The true initial momentum of the corresponding  ND::TG4Trajectory.

   TP0DECALReconTrack();
   TP0DECALReconTrack(const TP0DECALReconTrack & );
   virtual ~TP0DECALReconTrack();

   ClassDef(TP0DECALReconTrack,2); // Generated by MakeProject.
};
} // namespace
} // namespace
#endif
