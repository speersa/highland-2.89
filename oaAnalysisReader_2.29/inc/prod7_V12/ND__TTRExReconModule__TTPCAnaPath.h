//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Wed Apr  5 14:16:34 2023 by ROOT version 5.34/34)
//      from the StreamerInfo in file ../../oa_nt_beam_80600124-0055_f72mofocwqdr_anal_000_nu-bsdv01_2.root
//////////////////////////////////////////////////////////


#ifndef ND__TTRExReconModule__TTPCAnaPath_h
#define ND__TTRExReconModule__TTPCAnaPath_h
namespace ND {
namespace TTRExReconModule {
class TTPCAnaPath;
} // end of namespace.
} // end of namespace.

#include "TObject.h"
#include "TVector3.h"

namespace ND {
namespace TTRExReconModule {
class TTPCAnaPath : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         PathID;      //A unique identifier for the path within the pattern.
   int         G4ID;        //G4 ID of the primary true trajectory associated with this path.
   int         PathMatchingID;    //< A unique identifier for the path within the event.
   TVector3    FirstPosition;     //The start position of the path.
   TVector3    LastPosition;      //The end position of the path.
   double      Time;              //The T0 for the path.
   double      Length;            //The length of the path.
   double      Momentum;          //The momentum of the path.
   double      MomentumError;     //The momentum error of the path.
   TVector3    Direction;         //The direction of the path.
   bool        IsContained;       //True if the path does not leave the TPC; false otherwise.
   bool        LikFit;            //True if the likelihood fit was performed
   bool        Success;           //True if the likelihood fit succeeded
   double      FitLikelihood;     //Value of log likelihood from fit
   int         T0Source;          //Enumerator of T0 sources.
   int         NClusters;         //Number of clusters in the path.
   double      Charge;            //Charge of the path
   double      ElePull;           //
   double      EleExp;            //
   double      EleSigma;          //
   double      MuonPull;          //
   double      MuonExp;           //
   double      MuonSigma;         //
   double      PionPull;          //
   double      PionExp;           //
   double      PionSigma;         //
   double      ProtonPull;        //
   double      ProtonExp;         //
   double      ProtonSigma;       //
   double      KaonPull;          //
   double      KaonExp;           //
   double      KaonSigma;         //
   double      PDist;             //
   double      PEField;           //
   double      T0Range[2];        //
   double      T0RangeDeltaX[2];    //
   int         PID;                 //The PID of the path.
   double      NetCharge;           //The total charge left by the path on the micromegas
   int         NJunctions;          //The number of junctions to which the path connects.
   Int_t      *JunctionIDs;         //[NJunctions]
   int         NMatchingPaths;      //The number of paths to which this path might be matched.
   Int_t      *MatchingPathIDs;     //[NMatchingPaths]
   Double_t   *PathMatchingLikelihood;    //[NMatchingPaths]
   int         NMatchingPatterns;         //
   Int_t      *MatchingPatternIDs;        //[NMatchingPatterns]
   Int_t      *MatchingPatternPathIDs;    //[NMatchingPatterns]
   Double_t   *PatternMatchingLikelihood;    //[NMatchingPatterns]

   TTPCAnaPath();
   TTPCAnaPath(const TTPCAnaPath & );
   virtual ~TTPCAnaPath();

   ClassDef(TTPCAnaPath,2); // Generated by MakeProject.
};
} // namespace
} // namespace
#endif
