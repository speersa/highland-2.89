#include "SystId.hxx"

std::string SystId::ConvertSystematic(SystId::SystEnum syst){
  switch(syst){
    case kBFieldDist                : return "BFieldDist";
    case kMomScale                  : return "MomScale";
    case kMomResol                  : return "MomResol";
    case kMomRangeResol             : return "MomRangeResol";
    case kMomBiasFromVertexMigration: return "MomBiasFromVertexMigration";
    case kTpcPid                    : return "TpcPid";
    case kFgdPid                    : return "FgdPid";
    case kChargeIDEff               : return "ChargeIDEff";
    case kTpcClusterEff             : return "TpcClusterEff";
    case kTpcTrackEff               : return "TpcTrackEff";
    case kTpcFgdMatchEff            : return "TpcFgdMatchEff";
    case kTpcECalMatchEff           : return "TpcECalMatchEff";
    case kTpcP0dMatchEff            : return "TpcP0dMatchEff";
    case kFgdTrackEff               : return "FgdTrackEff";
    case kFgdHybridTrackEff         : return "FgdHybridTrackEff";
    case kMichelEleEff              : return "MichelEleEff";
    case kPileUp                    : return "PileUp";
    case kFgdMass                   : return "FgdMass";
    case kOOFV                      : return "OOFV";
    case kSIPion                    : return "SIPion";
    case kSIProton                  : return "SIProton";
    case kSandMu                    : return "SandMu";
    case kECalEMResol               : return "ECalEMResol";
    case kECalEMScale               : return "ECalEMScale";
    case kECalTrackEff              : return "ECalTrackEff";
    case kECalPID                   : return "ECalPID";
    case kECalPiZeroVetoPileUp      : return "ECalPiZeroVetoPileUp";
    case kECalPhotonPileUp          : return "ECalPhotonPileUp";
    case kFgdECalMatchEff           : return "FgdECalMatchEff";
    case kFgdECalSmrdMatchEff       : return "FgdECalSmrdMatchEff";
    case kToFResol                  : return "ToFResol";
    case kFluxWeight                : return "FluxWeight";
    case kECalEmHipPID              : return "ECalEmHipPID";
    case kFGD2Shower                : return "FGD2Shower";
    case kNuETPCPileUp              : return "NuETPCPileUp";
    case kNuEP0DPileUp              : return "NuEP0DPileUp";
    case kNuEECalPileUp             : return "NuEECalPileUp";
    case kNuEOOFV                   : return "NuEOOFV";
    case kP0DELossScale             : return "P0DELossScale";
    case kP0DELossResol             : return "P0DELossResol";
    case kP0DVeto                   : return "P0DVeto";
    default : return "kNotASyst";
  }
};

SystId::SystEnum SystId::GetSystematic(std::string syst){
  if(syst == "BFieldDist"                ) return SystId::kBFieldDist                ;
  if(syst == "MomScale"                  ) return SystId::kMomScale                  ;
  if(syst == "MomResol"                  ) return SystId::kMomResol                  ;
  if(syst == "MomRangeResol"             ) return SystId::kMomRangeResol             ;
  if(syst == "MomBiasFromVertexMigration") return SystId::kMomBiasFromVertexMigration;
  if(syst == "TpcPid"                    ) return SystId::kTpcPid                    ;
  if(syst == "FgdPid"                    ) return SystId::kFgdPid                    ;
  if(syst == "ChargeIDEff"               ) return SystId::kChargeIDEff               ;
  if(syst == "TpcClusterEff"             ) return SystId::kTpcClusterEff             ;
  if(syst == "TpcTrackEff"               ) return SystId::kTpcTrackEff               ;
  if(syst == "TpcFgdMatchEff"            ) return SystId::kTpcFgdMatchEff            ;
  if(syst == "TpcECalMatchEff"           ) return SystId::kTpcECalMatchEff           ;
  if(syst == "TpcP0dMatchEff"            ) return SystId::kTpcP0dMatchEff            ;
  if(syst == "FgdTrackEff"               ) return SystId::kFgdTrackEff               ;
  if(syst == "FgdHybridTrackEff"         ) return SystId::kFgdHybridTrackEff         ;
  if(syst == "MichelEleEff"              ) return SystId::kMichelEleEff              ;
  if(syst == "PileUp"                    ) return SystId::kPileUp                    ;
  if(syst == "FgdMass"                   ) return SystId::kFgdMass                   ;
  if(syst == "OOFV"                      ) return SystId::kOOFV                      ;
  if(syst == "SIPion"                    ) return SystId::kSIPion                    ;
  if(syst == "SIProton"                  ) return SystId::kSIProton                  ;
  if(syst == "SandMu"                    ) return SystId::kSandMu                    ;
  if(syst == "ECalEMResol"               ) return SystId::kECalEMResol               ;
  if(syst == "ECalEMScale"               ) return SystId::kECalEMScale               ;
  if(syst == "ECalTrackEff"              ) return SystId::kECalTrackEff              ;
  if(syst == "ECalPID"                   ) return SystId::kECalPID                   ;
  if(syst == "ECalPiZeroVetoPileUp"      ) return SystId::kECalPiZeroVetoPileUp      ;
  if(syst == "ECalPhotonPileUp"          ) return SystId::kECalPhotonPileUp          ;
  if(syst == "FgdECalMatchEff"           ) return SystId::kFgdECalMatchEff           ;
  if(syst == "FgdECalSmrdMatchEff"       ) return SystId::kFgdECalSmrdMatchEff       ;
  if(syst == "ToFResol"                  ) return SystId::kToFResol                  ;
  if(syst == "FluxWeight"                ) return SystId::kFluxWeight                ;
  if(syst == "ECalEmHipPID"              ) return SystId::kECalEmHipPID              ;
  if(syst == "FGD2Shower"                ) return SystId::kFGD2Shower                ;
  if(syst == "NuETPCPileUp"              ) return SystId::kNuETPCPileUp              ;
  if(syst == "NuEP0DPileUp"              ) return SystId::kNuEP0DPileUp              ;
  if(syst == "NuEECalPileUp"             ) return SystId::kNuEECalPileUp             ;
  if(syst == "NuEOOFV"                   ) return SystId::kNuEOOFV                   ;
  if(syst == "P0DELossScale"             ) return SystId::kP0DELossScale             ;
  if(syst == "P0DELossResol"             ) return SystId::kP0DELossResol             ;
  if(syst == "P0DVeto"                   ) return SystId::kP0DVeto                   ;
  return SystId::kNotASyst;
};
